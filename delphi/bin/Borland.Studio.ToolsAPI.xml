<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Borland.Studio.ToolsAPI</name>
    </assembly>
    <members>
        <member name="T:Borland.Studio.Languages.ILanguage">
            An interface to access language information of a project
        </member>
        <member name="M:Borland.Studio.Languages.ILanguage.AssemblyChanged(System.String)">
            Notification that an assembly has been changed
        </member>
        <member name="P:Borland.Studio.Languages.ILanguage.Name">
            Get the name of the language
        </member>
        <member name="T:Borland.Studio.Languages.IStringList">
            A list of string used to exchange information with a language host.
        </member>
        <member name="M:Borland.Studio.Languages.IStringList.Add(System.String)">
            Add a string to the list. Duplicate strings return the same index.
        </member>
        <member name="M:Borland.Studio.Languages.IStringList.Remove(System.String)">
            Remove a string from the list
        </member>
        <member name="M:Borland.Studio.Languages.IStringList.Clear">
            Clear all strings from the list
        </member>
        <member name="M:Borland.Studio.Languages.IStringList.IndexOf(System.String)">
            Returns the index of the given string or -1 if it is not in the list
        </member>
        <member name="P:Borland.Studio.Languages.IStringList.Count">
            Get the number of strings in the list
        </member>
        <member name="P:Borland.Studio.Languages.IStringList.Item(System.Int32)">
            Array access
        </member>
        <member name="T:Borland.Studio.Languages.IProject">
            A group of files and assemblies that form a single target.
        </member>
        <member name="P:Borland.Studio.Languages.IProject.Ident">
            Get a unique identifier for the project that can be used to compare
            to projects for identify.
        </member>
        <member name="T:Borland.Studio.Languages.TCodeCompletionContext">
             <summary>
            
             TOTACodeCompletionContext
            
             Primary code completion managers use this to let non-primary managers
             filter their data according to the invocation context.
             </summary>
        </member>
        <member name="F:Borland.Studio.Languages.SourceLocation.fileIndex">
            Index into the files list of the IProject the IInsite was retrieved
            from
        </member>
        <member name="F:Borland.Studio.Languages.SourceLocation.line">
            Line into the file
        </member>
        <member name="F:Borland.Studio.Languages.SourceLocation.column">
            Byte offset into the line. A tab is one column. Multi-byte UTF8
            sequences take up one column per byte.
        </member>
        <member name="T:Borland.Studio.Languages.SymbolInfo">
            Symbol iformation (ISymbolList item)
        </member>
        <member name="T:Borland.Studio.Languages.QueryFlags">
            Flags used by the GetSymbols method
        </member>
        <member name="F:Borland.Studio.Languages.QueryFlags.All">
            All symbols in scope
        </member>
        <member name="F:Borland.Studio.Languages.QueryFlags.Types">
            Types in the scope
        </member>
        <member name="F:Borland.Studio.Languages.QueryFlags.Namespaces">
            Namespaces in the scope
        </member>
        <member name="F:Borland.Studio.Languages.QueryFlags.Attributes">
            Attributes in the scope
        </member>
        <member name="F:Borland.Studio.Languages.QueryFlags.Sort">
            Sort symbols by name
        </member>
        <member name="F:Borland.Studio.Languages.QueryFlags.Assembly">
            Only return symbols in current assembly
        </member>
        <member name="M:Borland.Studio.Languages.IInsite.SymbolName(System.IntPtr)">
            Returns the name of the symbol
        </member>
        <member name="M:Borland.Studio.Languages.IInsite.SymbolHint(System.IntPtr)">
            Return the hint string for the given symbol
        </member>
        <member name="M:Borland.Studio.Languages.IInsite.SymbolLocation(System.IntPtr)">
            Return the location where the symbol is declared
        </member>
        <member name="M:Borland.Studio.Languages.IInsite.GetSymbolAccessFlags(System.IntPtr)">
            Return the access flags for the symbol
        </member>
        <member name="M:Borland.Studio.Languages.IInsite.GetSymbolKind(System.IntPtr)">
            Return the kind of the symbol
        </member>
        <member name="M:Borland.Studio.Languages.IInsite.SymbolDocComment(System.IntPtr)">
            Return document comment associated with the symbol
        </member>
        <member name="M:Borland.Studio.Languages.IInsite.SymbolHelpQuery(System.IntPtr)">
            Return the query to pass to the help system
        </member>
        <member name="M:Borland.Studio.Languages.IInsite.SymbolAt(Borland.Studio.Languages.SourceLocation)">
            Find the symbol at the given source location. Returns 0 if there is
            no symbol at the given location
        </member>
        <member name="M:Borland.Studio.Languages.IInsite.ScopeAt(Borland.Studio.Languages.SourceLocation)">
            Finds the scope at the given source location. Returns 0 if there is
            no scope at that location.
        </member>
        <member name="M:Borland.Studio.Languages.IInsite.FindSymbol(System.String)">
            Find a symbol by a given fully qualified name.
        </member>
        <member name="M:Borland.Studio.Languages.IInsite.GetSourceContext(Borland.Studio.Languages.SourceLocation)">
            Return the source scope context for the given location
        </member>
        <member name="M:Borland.Studio.Languages.IInsite.GetSymbols(System.IntPtr,System.IntPtr,Borland.Studio.Languages.QueryFlags,System.String,System.Int32[]@,System.Int32@)">
            Return the symbols in the scope represented by either a symbol
            returned by SymbolAt() or a scope returned by ScopeAt()
            sourceContext is the class for whom's scope you are accessing the
            symbols. If you pass a scope the sourceContext is implied by the
            scope so you can pass in 0. If you want all the private and
            protected members of a class you need to pass in the symbol
            as the source context. If you pass in 0 context for a class symbol
            you will only get the public members of the class. You can get the
            context of a source location by calling GetSourceContext.
            Passing in 0 for symbolOrScope will return the globally accessible
            symbols from the given sourceContext. If both are 0 only top level
            namepsaces are returned.
        </member>
        <member name="M:Borland.Studio.Languages.IInsite.GetParameters(Borland.Studio.Languages.SourceLocation,System.String[]@,Borland.Studio.Languages.SourceLocation[]@)">
            Get the parameters possible for the call at the given location.
            If the source is not in an argument list of a method call
            the method returns false.
        </member>
        <member name="M:Borland.Studio.Languages.IInsite.GetSymbolsInfo(System.IntPtr,System.IntPtr,Borland.Studio.Languages.QueryFlags,System.String,System.Int32@,System.Int32@)">
            Return the symbols as ISymbolList interface in the scope represented
            by either a symbol returned by SymbolAt() or a scope returned by ScopeAt()
            sourceContext is the class for whom's scope you are accessing the
            symbols. If you pass a scope the sourceContext is implied by the
            scope so you can pass in 0. If you want all the private and
            protected members of a class you need to pass in the symbol
            as the source context. If you pass in 0 context for a class symbol
            you will only get the public members of the class. You can get the
            context of a source location by calling GetSourceContext.
            Passing in 0 for symbolOrScope will return the globally accessible
            symbols from the given sourceContext. If both are 0 only top level
            namepsaces are returned.
        </member>
        <member name="T:Borland.Studio.Languages.IModuleInfo">
            Returns structural information about a file
        </member>
        <member name="M:Borland.Studio.Languages.IModuleInfo.GetModuleRoot">
            Return root information about the file
        </member>
        <member name="M:Borland.Studio.Languages.IModuleInfo.GetChildren(System.IntPtr)">
            Get the children of this symbol
        </member>
        <member name="M:Borland.Studio.Languages.IModuleInfo.SymbolName(System.IntPtr)">
            Returns the name of the symbol. This should should be a unique
            identifier for the symbol. It should be identical across parsings
            of the file for the same symbol and should include parameter
            information for overloaded methods. This string will be used for
            identity and will not be displayed.
        </member>
        <member name="M:Borland.Studio.Languages.IModuleInfo.SymbolText(System.IntPtr,System.Boolean)">
            Return the hint string for the given symbol. This is the text to
            be displayed in the module view. If fullText is true the text
            is supposed to resemble the declaration in source. If not, it is
            is intended to contain just the name and kind of the symbol.
        </member>
        <member name="M:Borland.Studio.Languages.IModuleInfo.SymbolLocation(System.IntPtr)">
            Return the location where the symbol is declared
        </member>
        <member name="M:Borland.Studio.Languages.IModuleInfo.GetSymbolAccessFlags(System.IntPtr)">
            Return the access flags for the symbol
        </member>
        <member name="M:Borland.Studio.Languages.IModuleInfo.GetSymbolKind(System.IntPtr)">
            Return the kind of the symbol
        </member>
        <member name="M:Borland.Studio.Languages.IModuleInfo.Modifiable(System.IntPtr)">
            Return if the symbol can be modified
        </member>
        <member name="M:Borland.Studio.Languages.IModuleInfo.ModifySymbol(System.IntPtr,System.String,System.String@,System.Int32@)">
            Request the symbol to be modified
        </member>
        <member name="T:Borland.Studio.ToolsAPI.DocumentationManager">
            <summary>
            Summary description for DocumentationManager.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Borland.Studio.ToolsAPI.DocumentationManager.DisplayName(System.String)" -->
        <member name="T:Borland.Studio.Refactoring.IRefactoring">
             <summary>
             A refactoring has two stages (at least identified at this point)
             First is a validation phase to see if it's possible or there are
             consequences the user should be aware of. The second phase is
             the actual refactoring. Refactorings can be queued i.e. the
             validation phase can be checked and then if prequesite actions
             are required they can be completed and then the actual refactoring
             can be performed. Both stages are executed within DoRefactoring.
             If an error occurs at either stage a RefactoringException is
             thrown with a user message indicating why the refactoring wasn't
             started or couldn't be completed.
            
             Based on JBuilder code by Mark Howe
            
             <author>Corbin Dunn</author>
             <date>April 13, 2004</date>
            
             <version>1.2</version>
             </summary>
        </member>
        <member name="M:Borland.Studio.Refactoring.IRefactoring.DoRefactoring">
            <summary>
            Do the refactoring, if an error occurs during refactoring
            it will throw an exception. DoRefactoring will only be called
            if CanRefadctor returns true.
            </summary>
        </member>
        <member name="M:Borland.Studio.Refactoring.IRefactoring.Undo">
            <summary>
            Undo/redo refactoring. All refactorings are expected
            to handle undo. Undo will only be called if CanUndo returns true.
            </summary>
        </member>
        <member name="M:Borland.Studio.Refactoring.IRefactoring.Closed">
            <summary>
            Refactoring closed, or cancelled, if it was not yet applied.
            </summary>
        </member>
        <member name="P:Borland.Studio.Refactoring.IRefactoring.CanRefactor">
            <summary>
            Return true if the refactoring can be applied
            </summary>
        </member>
        <member name="P:Borland.Studio.Refactoring.IRefactoring.CanUndo">
            <summary>
            Return true if the refactoring can be undone.
            </summary>
        </member>
        <member name="M:Borland.Studio.Refactoring.IUndoableRefactoring.AddFileToUndoList(System.String)">
            <summary>
            Allows you to add files to the undo list of a refactoring.
            The list is cleared before the refactoring is setup.
            </summary>
        </member>
        <member name="T:Borland.Studio.Refactoring.RefactoringException">
            <summary>
            Exception thrown by refactorings that could not be completed.
            </summary>
        </member>
        <member name="T:Borland.Studio.Refactoring.RefactoringKinds">
            <summary>
            Refactoring kinds. You can request an IRefactorable interface from an
            IOTAModule, and then see if the IRefactorable returned instance supports
            a given one of these kinds.
            </summary>
        </member>
        <member name="T:Borland.Studio.Refactoring.IRefactoringItem">
            <summary>
            Represents a refactoring item that can be invoked, or displayed
            to the user on a menu item, right click context menu, et cetera.
            </summary>
        </member>
        <member name="M:Borland.Studio.Refactoring.IRefactoringItem.Invoke">
            <summary>
             Called when the user clicks on the item. You will probalby show
             a dialog, and then execute the refactoring.
            </summary>
        </member>
        <member name="M:Borland.Studio.Refactoring.IRefactoringItem.Update">
            <summary>
             Updates all the above properties. MUST be called
             before calling any of the above.
            </summary>
        </member>
        <member name="P:Borland.Studio.Refactoring.IRefactoringItem.Kind">
            <summary>
            Returns the refactoring kind string that this item is. See RefactoringKinds.
            </summary>
        </member>
        <member name="P:Borland.Studio.Refactoring.IRefactoringItem.Caption">
            <summary>
            Suggested caption to use for this refactoring kind.
            </summary>
        </member>
        <member name="P:Borland.Studio.Refactoring.IRefactoringItem.Shortcut">
            <summary>
            String representation of the suggested keyboard shortcut to use for
            this refactoring kind.
            </summary>
        </member>
        <member name="P:Borland.Studio.Refactoring.IRefactoringItem.Enabled">
            <summary>
            Returns true if this item is enabled, false otherwise. Always call
            UpdateRefactoringTypes() on IRefactorable before accessing this properties.
            </summary>
        </member>
        <member name="T:Borland.Studio.Refactoring.IRefactorable">
            <summary>
            A module that implements IRefactorable (from GetService)
            can have refactorings applied to it, and refactorings
            can be retrieved from it.
            </summary>
        </member>
        <member name="M:Borland.Studio.Refactoring.IRefactorable.GetRefactoring(System.String)">
            <summary> Retrieve a particular refactoring kind from this
            module. returns null if not supported
            </summary>
        </member>
        <member name="T:Borland.Studio.Refactoring.RefactoringEventArgs">
            <summary>
            Event arguments sent during a refactoring event.
            </summary>
        </member>
        <member name="T:Borland.Studio.Refactoring.IRefactoringEngine">
            <summary>
            Main engine for refactoring. When a refactoring is going to happen,
            an XML packet is sent around describing it.
            </summary>
        </member>
        <member name="P:Borland.Studio.Refactoring.IRefactoringNode.Icon">
            <summary>
            UI icon to show.
            </summary>
        </member>
        <member name="P:Borland.Studio.Refactoring.IRefactoringNode.Text">
            <summary>
            Text to display on the node
            </summary>
        </member>
        <member name="P:Borland.Studio.Refactoring.IRefactoringNode.Hint">
            <summary>
            Fly over hint text to show
            </summary>
        </member>
        <member name="P:Borland.Studio.Refactoring.IRefactoringNode.Data">
            <summary>
            Data pointer used by the UI. Do not use it yourself.
            </summary>
        </member>
        <member name="T:Borland.Studio.Refactoring.IBoldNode">
            <summary> allows a node to have portions of it bold </summary>
        </member>
        <member name="P:Borland.Studio.Refactoring.IBoldNode.BoldStart">
            <summary>
            start location in the text to bold.
            return -1 to indicate to not bold anything.
            </summary>
        </member>
        <member name="P:Borland.Studio.Refactoring.IBoldNode.BoldEnd">
            <summary>
            end location in the text to bold.
            </summary>
        </member>
        <member name="P:Borland.Studio.Refactoring.IRefactoringFileNode.Filename">
            <summary>
            The file to open when double clicking on the item happens
            </summary>
        </member>
        <member name="P:Borland.Studio.Refactoring.IRefactoringFileNode.LineNumber">
            <summary>
            The file line number associated with your message, if any
            </summary>
        </member>
        <member name="P:Borland.Studio.Refactoring.IRefactoringFileNode.ColumnNumber">
            <summary>
            The file column number associated with your message, if any
            </summary>
        </member>
        <member name="T:Borland.Studio.Refactoring.NodeInsertType">
            <summary>
            Insert location enumeration. 
            </summary>
        </member>
        <member name="T:Borland.Studio.Refactoring.IBaseRefactoringUserInterface">
            <summary>
            Represents the base user interface for refactorings.
            </summary>
        </member>
        <member name="M:Borland.Studio.Refactoring.IBaseRefactoringUserInterface.AddChild(Borland.Studio.Refactoring.IRefactoringNode,Borland.Studio.Refactoring.IRefactoringNode)">
            <summary>
            Adds a child node to the user interface.
            </summary>
        </member>
        <member name="M:Borland.Studio.Refactoring.IBaseRefactoringUserInterface.InsertChild(Borland.Studio.Refactoring.IRefactoringNode,Borland.Studio.Refactoring.IRefactoringNode,Borland.Studio.Refactoring.NodeInsertType)">
            <summary>
            Inserts a child node after parent based on attachMode.
            <param name="attachMode">Indicates how the child node is going to be
            inserted relative to the parent node</param>
            </summary>
        </member>
        <member name="M:Borland.Studio.Refactoring.IBaseRefactoringUserInterface.RemoveChild(Borland.Studio.Refactoring.IRefactoringNode)">
            <summary>
            Removes a node.
            </summary>
        </member>
        <member name="M:Borland.Studio.Refactoring.IBaseRefactoringUserInterface.ClearChildren(Borland.Studio.Refactoring.IRefactoringNode)">
            <summary>
            Clears all children from the parent node.
            </summary>
        </member>
        <member name="M:Borland.Studio.Refactoring.IBaseRefactoringUserInterface.BeginUpdate">
            <summary>
            Begins updates on the UI when you are doing multiple updates. You
            must call EndUpdate to let the UI resume operation.
            </summary>
        </member>
        <member name="M:Borland.Studio.Refactoring.IBaseRefactoringUserInterface.EndUpdate">
            <summary>
            Ends updates on the UI.
            </summary>
        </member>
        <member name="M:Borland.Studio.Refactoring.IBaseRefactoringUserInterface.ExpandNode(Borland.Studio.Refactoring.IRefactoringNode)">
            <summary>
            Expands the given node.
            </summary>
        </member>
        <member name="M:Borland.Studio.Refactoring.IBaseRefactoringUserInterface.StatusMessage(System.String)">
            <summary>
            Sets the status message to whatever was passed to it.
            </summary>
        </member>
        <member name="T:Borland.Studio.Refactoring.IRefactoringUserInterface">
            <summary>
            Represents the UI for refactorings to use.
            </summary>
        </member>
        <member name="M:Borland.Studio.Refactoring.IRefactoringUserInterface.AddRootRefactoringNode(Borland.Studio.Refactoring.IRefactoringNode,Borland.Studio.Refactoring.IRefactoring)">
            <summary>
            Adds a refactoring to the UI with a given node.
            </summary>
        </member>
        <member name="T:Borland.Studio.Refactoring.IFindReferenceUserInterface">
            <summary>
            Represents the UI for find references to use.
            </summary>
        </member>
        <member name="M:Borland.Studio.Refactoring.IFindReferenceUserInterface.AddRootReferenceNode(Borland.Studio.Refactoring.IRefactoringNode)">
            <summary>
            Adds a refactoring to the UI with a given node.
            </summary>
        </member>
        <member name="T:Borland.Studio.Refactoring.IFindIdentifierRefactoring">
            <summary>
            Allows to control FindIdentifier refactoring directly
            </summary>
        </member>
        <member name="M:Borland.Studio.Refactoring.IFindIdentifierRefactoring.FindIdentifier(System.String)">
            <summary>
            Finds a symbol for the identifier and goes to its definition
            </summary>
        </member>
        <member name="T:Borland.Studio.Refactoring.IRefactoringRegistrar">
            <summary>
             Provides an interface for adding and removing refactorings.
             This interface will be provided as an IDEService.
             </summary>
        </member>
        <member name="M:Borland.Studio.Refactoring.IRefactoringRegistrar.RegisterRefactoring(Borland.Studio.Refactoring.IRefactoringItem,System.String)">
            <summary>
             Adds the IRefactoringItem to the list of refactorings for the specified
             personality. The implementation should ensure that the item does not
             already exist and do nothing if it does. The personality should be
             one of ToolsAPI.OTAIDEPersonalities.
             </summary>
        </member>
        <member name="M:Borland.Studio.Refactoring.IRefactoringRegistrar.UnregisterRefactoring(Borland.Studio.Refactoring.IRefactoringItem,System.String)">
            <summary>
             Removes the IRefactoringItem from the list of refactorings for the
             specified personality. Does nothing if the refactoring is not already
             registered. The personality should be one of ToolsAPI.OTAIDEPersonalities.
             </summary>
        </member>
        <member name="M:Borland.Studio.Refactoring.IRefactoringRegistrar.GetRefactoringsEnumerator(System.String)">
            <summary>
            Returns an enumerator of the refactorings registered for the specified
            personality. The personality should be one of ToolsAPI.OTAIDEPersonalities.
            </summary>
        </member>
        <member name="E:Borland.Studio.Refactoring.IRefactoringRegistrar.RefactoringListChanged">
            <summary>
            Notifies of a change in the list of refactoring. Makes it possible
            to re-read the list for those who caches the information internally.
            </summary>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.IOTAHelpInsight">
            <summary>
            Allows Help Insight to show documentation information
            from the current symbol in the code editor.
            Query for it from the IOTAModule. If it isn't present,
            then this feature is not present.
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAHelpInsight.GetEditorDocInfo(System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Gets documentation information for the current symbol in
            the code editor. width is in characters.
            </summary>
            <returns>The XML documentation for that item, or null if none
            could be found.</returns>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.IOTAModuleServices">
            <summary>
            Allows access to modules (file groups) open in the IDE.
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAModuleServices.CloseAll">
            <summary>
            Close all open modules including the Project Group
            </summary>
            <returns>True if it worked, false otherwise.</returns>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAModuleServices.CreateModule(Borland.Studio.ToolsAPI.IOTACreator)">
            <summary>
            Given the Creator, create a new module (project, project group) of the implied type
            </summary>
            <returns>The module that was created</returns>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAModuleServices.FindModule(System.String)">
             <summary>
            Lookup the given module by file name
             </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAModuleServices.GetModule(System.Int32)">
            <summary>
            Return an interface on the module at index }
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAModuleServices.NewModule">
            <summary>
            Open the File|New dialog 
            </summary>
            <returns>True, if it worked.</returns>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAModuleServices.SaveAll">
            <summary>
            Save all modules. Same as File|Save All.
            </summary>
            <returns>True, if everything was saved.</returns>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAModuleServices.FindProjectFromFileNameEntry(System.String)">
            <summary>
            Finds a given project that the file exists in. If it exists in
            multiple projects, it returns the first project found for it.
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAModuleServices.OpenModule(System.String)">
            <summary>
            Opens and returns an <see cref="T:Borland.Studio.ToolsAPI.IOTAModule"/> representing the given file.  If the file is
            already open, then that module is returned. If you want to show the module
            you must call <see cref="M:Borland.Studio.ToolsAPI.IOTAModule.Show"/>, call <see cref="M:Borland.Studio.ToolsAPI.IOTAModule.ShowFileName(System.String)"/>, or iterate
            through the module's editors and show one specifically.  If you never show
            the module, it will remain open and participate in any File|Close all, or
            File|Save all operations, which means the IDE may ask you to save the module
            if it is modified.
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAModuleServices.AddFileSystem(Borland.Studio.ToolsAPI.IOTAFileSystem)">
            <summary>
            Registers a new file system
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAModuleServices.RemoveFileSystem(System.Int32)">
            <summary>
            Removes the index'd file system from the installed file system list
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTAModuleServices.CurrentModule">
            <summary>
            Return the currently active module
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTAModuleServices.ModuleCount">
            <summary>
            Return the number of currently open modules } 
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTAModuleServices.MainProjectGroup">
            <summary>
            Returns the currently open ProjectGroup
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTAModuleServices.ActiveProject">
            <summary>
            Returns the currently active project.  This will return an "unbound"
            package project if one is open without a project group.
            </summary>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.OTAEditPos">
            <summary>
            Editor position expressed as column/line after tabs are expanded to spaces
            and include the "virtual" editor space (columns beyond the end of lines)
            </summary>
        </member>
        <member name="F:Borland.Studio.ToolsAPI.OTAEditPos.Col">
            <summary>
            One-based representation of an editor column.  For interop reasons this is
            defined as an int, but only assign it Int16/short values.
            </summary>
        </member>
        <member name="F:Borland.Studio.ToolsAPI.OTAEditPos.Line">
            <summary>
            One-based representation of an editor line
            </summary>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.OTACharPos">
            <summary>
            Editor position expressed as character index/line before tabs are expanded
            and does not include the indices beyond the end of a line
            </summary>
        </member>
        <member name="F:Borland.Studio.ToolsAPI.OTACharPos.CharIndex">
            <summary>
            Zero-based character index.  For interop reasons this is defined as an int, but only assign it Int16/short values.
            </summary>
        </member>
        <member name="F:Borland.Studio.ToolsAPI.OTACharPos.Line">
            <summary>
            One-based line number
            </summary>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.OTASize">
            <summary>
            Generic representation of an X, Y size
            </summary>
        </member>
        <member name="F:Borland.Studio.ToolsAPI.OTASize.X">
            <summary>
            Width
            </summary>
        </member>
        <member name="F:Borland.Studio.ToolsAPI.OTASize.Y">
            <summary>
            Height
            </summary>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.OTABlockType">
            <summary>
            Block selection types in the code editor
            </summary>
        </member>
        <member name="F:Borland.Studio.ToolsAPI.OTABlockType.btInclusive">
            <summary>
            The selection includes all text between the two endpoints, including both endpoints.
            </summary>
        </member>
        <member name="F:Borland.Studio.ToolsAPI.OTABlockType.btLine">
            <summary>
            The selection includes the entire lines that contain the endpoints.
            </summary>
        </member>
        <member name="F:Borland.Studio.ToolsAPI.OTABlockType.btColumn">
            <summary>
            The selected text is all the text falling within a rectangular region
            whose upper-left and lower-right corners are specified by the selection
            endpoints, interpreted as edit positions.
            </summary>
        </member>
        <member name="F:Borland.Studio.ToolsAPI.OTABlockType.btNonInclusive">
            <summary>
            The selection includes all text between the two endpoints, including the
            starting position, but not including the ending position. This is the
            default for selections made with the mouse.
            </summary>
        </member>
        <member name="F:Borland.Studio.ToolsAPI.OTABlockType.btUnknown">
            <summary>
            No selection.
            </summary>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.IOTAEditBlock">
            <summary>
            IOTAEditBlock lets you work with the selection in the source editor
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAEditBlock.BeginBlock">
            <summary>
            Starts a new selection at the current cursor position. After calling BeginBlock, set a new cursor position, and call <see cref="M:Borland.Studio.ToolsAPI.IOTAEditBlock.EndBlock"/> to finish the selection.
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAEditBlock.Copy(System.Boolean)">
            <summary>
            Copies the selected text to the clipboard
            </summary>
            <param name="append">If true, the selection is appended to the text currently on the clipboard. If it is false, the selection replaces the clipboard contents.</param>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAEditBlock.Cut(System.Boolean)">
            <summary>
            Copies the selected text to the clipboard, and then deletes the text.
            </summary>
            <param name="append">If true, the selection is appended to the text currently on the clipboard. If it is false, the selection replaces the clipboard contents.</param>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAEditBlock.Delete">
            <summary>
            Deletes the selected text. The deletion is added to the undo stack, so the user can restore the deleted text.
            </summary>
            <returns>Returns true for success or false for failure (e.g., there is no selection to delete).</returns>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAEditBlock.EndBlock">
            <summary>
            Sets the ending position of a selection. Start by setting the cursor position and calling BeginBlock; then set the ending cursor position and call EndBlock.
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAEditBlock.Extend(System.Int32,System.Int32)">
            <summary>
            Moves the cursor to a new position and sets a new selection, keeping the other end of the selection in place. The selection can grow or shrink in size.
            </summary>
            <param name="newRow">The new row for the cursor and limit of the selection</param>
            <param name="newCol">The new column number for the cursor and limit of the selection</param>
            <returns>Returns true for success or false for failure</returns>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAEditBlock.ExtendPageUp">
            <summary>
            Extends the selection by moving the cursor one page up
            </summary>
            <returns>Returns true for success or false for failure</returns>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAEditBlock.ExtendPageDown">
            <summary>
            Extends the selection by moving the cursor one page down
            </summary>
            <returns>Returns true for success or false for failure</returns>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAEditBlock.ExtendReal(System.Int32,System.Int32)">
            <summary>
            Moves the cursor to a new position and sets a new selection, keeping the other end of the selection
            in place. The selection can grow or shrink in size. ExtendReal differs from <see cref="M:Borland.Studio.ToolsAPI.IOTAEditBlock.Extend(System.Int32,System.Int32)"/> only when the
            user modifies a file during a debugging session. Extend uses the modifed source code that the user
            sees. Behind the scenes, the debugger must keep track of the original line numbers, so breakpoints,
            etc., continue to work correctly. ExtendReal uses the original line numbers when extending the block.
            </summary>
            <param name="newRow">The new row for the cursor and limit of the selection</param>
            <param name="newCol">The new column number for the cursor and limit of the selection</param>
            <returns>Returns true for success or false for failure</returns>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAEditBlock.ExtendRelative(System.Int32,System.Int32)">
            <summary>
            ExtendRelative extends the selection by moving the cursor an amount relative to its current position.
            </summary>
            <param name="deltaRow">The number of rows to move the cursor. Positive values move the cursor down, and negative values move the cursor up.</param>
            <param name="deltaCol">The number of columns to move the cursor. Positive values move the cursor to the right, and negative values move the cursor left.</param>
            <returns>Returns true for success or false for failure</returns>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAEditBlock.Indent(System.Int32)">
            <summary>
            Indents or outdents the selection. To indent by the user-specified default indent amount, use the BlockIndent edit option.
            </summary>
            <param name="magnitude">The number of columns to indent (positive values) or outdent (negative values) the selection</param>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAEditBlock.LowerCase">
            <summary>
            Converts all the characters in the selected text to lowercase
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAEditBlock.Print">
            <summary>
            Prints the selected text
            </summary>
            <returns>Returns true for success or false for failure</returns>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAEditBlock.Reset">
            <summary>
            Clears the selection bounds. After calling Reset, <see cref="P:Borland.Studio.ToolsAPI.IOTAEditBlock.IsValid"/> is false, and <see cref="P:Borland.Studio.ToolsAPI.IOTAEditBlock.Size"/> is zero. Reset does not affect the selected text.
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAEditBlock.Restore">
            <summary>
            Pops the top of the stack of saved blocks and sets the current block limits and type to the popped
            block. Note that the restored block is not marked as valid and so is not shown to the user. If
            you want to use the restored block in any way, you must set the block limits explicitly.
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAEditBlock.Save">
            <summary>
            Pushes the current block limits and type onto a stack of blocks
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAEditBlock.SaveToFile(System.String)">
            <summary>
            Saves the selected text to a file
            </summary>
            <param name="fileName">The name of the file to overwrite with the selected text</param>
            <returns>Returns true for success or false if there is no selection to save.</returns>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAEditBlock.ToggleCase">
            <summary>
            Toggles the case (converts lowercase to uppercase and uppercase to lowercase) of the selected text
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAEditBlock.UpperCase">
            <summary>
            Converts the selected text to uppercase.
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTAEditBlock.EndingColumn">
            <summary>
            The column number (starting at 1 for the leftmost column) of the end of the block. The column number is the visual column, after expanding tab characters.
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTAEditBlock.EndingRow">
            <summary>
            The line number (starting at 1 for the first line) of the end of the block
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTAEditBlock.IsValid">
            <summary>
            Returns true if the selection is valid, that is, if there is a selection. It returns false if there is no valid selection.
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTAEditBlock.Size">
            <summary>
            The number of characters in the selection. The size includes line ending characters. Note that the size depends on the style as well as the starting and ending positions.
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTAEditBlock.StartingColumn">
            <summary>
            The column number (starting at 1 for the leftmost column) of the start of the block. The column number is the visual column, after expanding tab characters.
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTAEditBlock.StartingRow">
            <summary>
            The line number (starting at 1 for the first line) of the start of the block
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTAEditBlock.Style">
            <summary>
            Returns or changes the selection style
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTAEditBlock.Text">
            <summary>
            Returns a copy of the selected text. If the style is btColumn, the Text includes line ending characters at the end of each line.
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTAEditBlock.Visible">
            <summary>
            True if the selected text is highlighted. It is false if not.
            </summary>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.IOTABufferOptions">
            <summary>
            Not implemented yet
            </summary>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.OTAEditorFileTypes">
            <summary>
            <see cref="T:Borland.Studio.ToolsAPI.IOTAEditOptions"/> are associated with file types based on string
            identifiers. See <see cref="T:Borland.Studio.ToolsAPI.IOTAEditorService"/> for more information.
            </summary>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.IOTAEditorService">
             <summary>
             Stub implementation; not yet done, at all!
            </summary>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.IOTAEditOptions">
            <summary>
            Not implemented yet.
            Certain options are now associated with particular file types,
            as seen in the Editor Options. Use the <see cref="T:Borland.Studio.ToolsAPI.IOTAEditorService"/> to
            get options for a particular internal id, passing one of the
            cDefEd* strings. You may also add your own editor options
            using the <see cref="T:Borland.Studio.ToolsAPI.IOTAEditorService"/>.
            </summary>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.IOTAEditBuffer">
            <summary>
            ITOAEditBuffer is the interface to the source editor’s internal edit
            buffer for a file. Every file in the source editor has an edit buffer.
            If multiple views are open on the same file, all the view share a
            common edit buffer.
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAEditBuffer.ClearUndo">
            <summary>
            Clears the undo stack, preventing the user from undoing any past edits
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAEditBuffer.Print">
            <summary>
            Brings up a dialog allowing the user to print the buffer
            </summary>
            <returns>Returns true for success or false for failure</returns>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAEditBuffer.Redo">
            <summary>
            Redo the last undo action
            </summary>
            <returns>Returns true if a redo was completed</returns>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAEditBuffer.Undo">
            <summary>
            Undo the last edit action
            </summary>
            <returns>Returns true if an undo was completed</returns>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTAEditBuffer.BufferOptions">
            <summary>
            Not implemented yet
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTAEditBuffer.CurrentDate">
            <summary>
            Returns the date and time of the most recent modification to the file
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTAEditBuffer.EditBlock">
            <summary>
            The current selection.  See <see cref="T:Borland.Studio.ToolsAPI.IOTAEditBlock"/>.
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTAEditBuffer.EditPosition">
            <summary>
            The current caret position.  See <see cref="T:Borland.Studio.ToolsAPI.IOTAEditPosition"/>.
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTAEditBuffer.InitialDate">
            <summary>
            The date and time when editing started on the buffer
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTAEditBuffer.IsModified">
            <summary>
            Determine is the editor has been modified since the last save/open
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTAEditBuffer.IsReadOnly">
            <summary>
            Determine if the editor is readonly or editable
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTAEditBuffer.TopView">
            <summary>
            Returns the topmost/active edit view
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTAEditBuffer.EditOptions">
            <summary>
            Not implemented yet
            </summary>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.OTASearchDirection">
            <summary>
            Tells the editor which way to start searching for text
            </summary>
        </member>
        <member name="F:Borland.Studio.ToolsAPI.OTASearchDirection.sdForward">
            <summary>
            Search forwards
            </summary>
        </member>
        <member name="F:Borland.Studio.ToolsAPI.OTASearchDirection.sdBackward">
            <summary>
            Search backwards
            </summary>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.OTAMoveCursorMasks">
            <summary>
            Parameters for moving the cursor in the editor.  Used by <see cref="M:Borland.Studio.ToolsAPI.IOTAEditPosition.MoveCursor(Borland.Studio.ToolsAPI.OTAMoveCursorMasks)"/>.
            </summary>
        </member>
        <member name="F:Borland.Studio.ToolsAPI.OTAMoveCursorMasks.mmSkipWord">
            <summary>
            Skip to the next alphanumeric character
            </summary>
        </member>
        <member name="F:Borland.Studio.ToolsAPI.OTAMoveCursorMasks.mmSkipNonWord">
            <summary>
            Skip to the next non-alphanumeric character
            </summary>
        </member>
        <member name="F:Borland.Studio.ToolsAPI.OTAMoveCursorMasks.mmSkipWhite">
            <summary>
            Skip to the next whitespace character (space, tab, newline)
            </summary>
        </member>
        <member name="F:Borland.Studio.ToolsAPI.OTAMoveCursorMasks.mmSkipNonWhite">
            <summary>
            Skip to the next non-whitespace character
            </summary>
        </member>
        <member name="F:Borland.Studio.ToolsAPI.OTAMoveCursorMasks.mmSkipSpecial">
            <summary>
            Skip to the next non-alphanumeric and non-whitespace character
            </summary>
        </member>
        <member name="F:Borland.Studio.ToolsAPI.OTAMoveCursorMasks.mmSkipNonSpecial">
            <summary>
            Skip to the next alphanumeric or whitespace character
            </summary>
        </member>
        <member name="F:Borland.Studio.ToolsAPI.OTAMoveCursorMasks.mmSkipLeft">
            <summary>
            Move to the left or toward the beginning of the file
            </summary>
        </member>
        <member name="F:Borland.Studio.ToolsAPI.OTAMoveCursorMasks.mmSkipRight">
            <summary>
            Move to the right or toward the end of the file
            </summary>
        </member>
        <member name="F:Borland.Studio.ToolsAPI.OTAMoveCursorMasks.mmSkipStream">
            <summary>
            Ignore line ends when skipping.  When used with
            mmSkipWhite, and the cursor is at the beginning or end
            of a line, the cursor will continue to move until it
            reaches a non-white character, non-EOL character, BOF or EOF
            </summary>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.IOTASearchOptions">
            <summary>
            Not implemented yet
            </summary>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.IOTAReplaceOptions">
            <summary>
            Not implemented yet
            </summary>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.OTARipFlags">
            <summary>
            Used with <see cref="M:Borland.Studio.ToolsAPI.IOTAEditPosition.RipText(System.String,Borland.Studio.ToolsAPI.OTARipFlags)"/> to control the most common character sets
            to include in the text ripped from the editor, and specify how to rip the
            text from the cursor position.
            </summary>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.IOTAEditPosition">
            <summary>
            IOTAEditPosition returns information about the caret position in the source
            editor and about the text under and near the caret. It also permits inserting
            and deleting text at the caret, searching for text, replacing text, and
            moving the caret. If you need to read, write, or modify small amounts of text,
            IOTAEditPosition is often simplest to use. For large amounts of text, you might
            find it easier to use a file reader or writer.  Some functions here do not
            properly support UNICODE characters yet.  After modifying the position, you
            may need to call <see cref="M:Borland.Studio.ToolsAPI.IOTAEditView.Paint"/> to force a refresh.
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAEditPosition.Align(System.Int32)">
            <summary>
            Align inserts white space at the caret to advance the caret to the next alignment position.
            If the caret is on the first non-white space character of the line, this function is similar
            to the editor’s auto indent feature.
            </summary>
            <param name="magnitude">The number of indentation levels to advance. Negative numbers are ignored. Zero is the same as one.</param>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAEditPosition.BackspaceDelete(System.Int32)">
            <summary>
            Delete characters before the edit cursor
            </summary>
            <param name="howMany">The number of characters to delete</param>
            <returns>Returns true for success or false if the editor could not delete any text (because the caret is on the first character of the buffer, or the buffer is readonly).</returns>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAEditPosition.Delete(System.Int32)">
            <summary>
            Delete characters after the edit cursor
            </summary>
            <param name="howMany">The number of characters to delete</param>
            <returns>Returns true for success or false if the editor could not delete any text (because the buffer is readonly)</returns>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAEditPosition.DistanceToTab(Borland.Studio.ToolsAPI.OTASearchDirection)">
            <summary>
            Returns the number of columns to the next tab stop
            </summary>
            <param name="direction">Which direction to search for the tab stop</param>
            <returns>The number of column positions to the next tab stop. Positive numbers are to the right and negative numbers are to the left.</returns>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAEditPosition.GetSearchErrorString(System.Int32)">
            <summary>
            GetSearchErrorString gets the text of an error message, given a search or replace error code.
            Note that failing to find a match is not considered an error. A non-zero ErrorCode from
            <see cref="M:Borland.Studio.ToolsAPI.IOTAEditPosition.Search(System.String,System.Boolean,System.Boolean,System.Boolean,Borland.Studio.ToolsAPI.OTASearchDirection,System.Int32@)"/> or <see cref="M:Borland.Studio.ToolsAPI.IOTAEditPosition.Replace(System.String,System.String,System.Boolean,System.Boolean,System.Boolean,Borland.Studio.ToolsAPI.OTASearchDirection,System.Int32@)"/> means the search parameters are ill-formed (e.g., syntax error in a regular expression).
            </summary>
            <param name="errorCode">The value obtained from a call to Search or Replace.</param>
            <returns>The text of the error message</returns>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAEditPosition.GotoLine(System.Int32)">
            <summary>
            Move the caret to the start of a line.
            </summary>
            <param name="lineNumber">The destination line number. If the line number is greater than LastRow, the caret is moved to the last row. If the line number is not positive, the editor pops up the Goto Line dialog box, where the user can enter a line number.</param>
            <returns>True for success or false if the user cancles the Goto Line dialog box.</returns>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAEditPosition.InsertBlock(Borland.Studio.ToolsAPI.IOTAEditBlock)">
            <summary>
            Not implemented yet
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAEditPosition.InsertCharacter(System.Char)">
            <summary>
            Insert a character at the cursor
            </summary>
            <param name="character">The character to insert</param>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAEditPosition.InsertFile(System.String)">
            <summary>
            Insert a text file at the cursor position
            </summary>
            <param name="fileName">The text file to insert</param>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAEditPosition.InsertText(System.String)">
            <summary>
            Insert a string at the cursor position
            </summary>
            <param name="text">The string to insert</param>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAEditPosition.Move(System.Int32,System.Int32)">
            <summary>
            Move the cursor to a specific position
            </summary>
            <param name="row">1-based line number</param>
            <param name="col">1-based column number</param>
            <returns>Returns true for success or false if Row and Col are invalid or if the caret is already at that position.</returns>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAEditPosition.MoveBOL">
            <summary>
            Move the cursor to the beginning of the line
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAEditPosition.MoveEOF">
            <summary>
            Move the cursor to the end of the file
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAEditPosition.MoveEOL">
            <summary>
            Move the cursor to the end of the line
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAEditPosition.MoveCursor(Borland.Studio.ToolsAPI.OTAMoveCursorMasks)">
            <summary>
            MoveCursor moves the caret according to a set of flags.
            </summary>
            <param name="moveMask">A mask of flags to control how the caret moves. The mask is a combination
            of up to one of the first six skip specifiers, plus either mmSkipLeft or mmSkipRight, plus the
            optional mmSkipStream.  Note that line endings are not considered white space characters for
            mmSkipWhite and mmSkipNonWhite. In order to skip over line endings, you must use mmSkipWhite
            combined with mmSkipStream.</param>
            <returns>The return value is true for success or false for invalid flags.</returns>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAEditPosition.MoveReal(System.Int32,System.Int32)">
            <summary>
            Moves the caret to a new position. MoveReal differs from Move only when the user modifies a
            file during a debugging session. Move uses the modifed source code that the user sees. Behind
            the scenes, the debugger must keep track of the original line numbers, so breakpoints, etc.,
            continue to work correctly. MoveReal uses the original line numbers when moving the caret.
            </summary>
            <param name="row">The new row number. The first row is 1.</param>
            <param name="col">The new column number. The leftmost column is 1.</param>
            <returns>Returns true for success or false if Row and Col are invalid or if the caret is already at that position.</returns>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAEditPosition.MoveRelative(System.Int32,System.Int32)">
            <summary>
            Moves the caret relative to the current position
            </summary>
            <param name="row">The number of rows to move</param>
            <param name="col">The number of columns to move</param>
            <returns></returns>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAEditPosition.Paste">
            <summary>
            Paste text from the clipboard if any is present
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAEditPosition.Read(System.Int32)">
            <summary>
            Reads contiguous characters from the buffer, starting at the caret position.
            </summary>
            <param name="numberOfCharacters">The maximum number of characters
            to read (up to 4 KB). Fewer characters might be read if the end of buffer is reached.
            </param>
            <returns>Tthe text read from the buffer</returns>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAEditPosition.RepeatLastSearchOrReplace">
            <summary>
            Repeat the most recent Search or Replace operation, whichever was more recent
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAEditPosition.Replace(System.String,System.String,System.Boolean,System.Boolean,System.Boolean,Borland.Studio.ToolsAPI.OTASearchDirection,System.Int32@)">
            <summary>
            Searches for text and if found replaces the matched text, according to the given parameters.
            </summary>
            <param name="pattern">The search text or regular expression</param>
            <param name="replaceText">The replacement text</param>
            <param name="caseSensitive">Whether the search is case sensitive</param>
            <param name="regularExpression">Whether the supplied search pattern is a regular expression</param>
            <param name="wholeFile">If wholeFile parameter is true, the entire file is searched. If false, the selected block is searched; if there is no block, the search fails.</param>
            <param name="direction">The direction to search</param>
            <param name="errorCode">If the search and replace cannot be performed, an error code is stored in
            the errorCode parameter. If the search and replace can be performed, errorCode is set to zero,
            even if the search cannot find a match.</param>
            <returns>The number of replacements performed</returns>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAEditPosition.Replace">
            <summary>
            Show the IDE seach/replace dialog
            </summary>
            <returns>The number of replacements</returns>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAEditPosition.ReplaceAgain">
            <summary>
            Repeat the most recent replace operation
            </summary>
            <returns>The number of replacements performed. Zero means the editor failed to find a match.</returns>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAEditPosition.Restore">
            <summary>
            Pops the top of the save stack and sets the caret to the popped position.  If the stack is empty, the caret does not move.
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAEditPosition.RipText(System.String,Borland.Studio.ToolsAPI.OTARipFlags)">
            <summary>
            Reads text from the edit buffer, starting at the caret position. The extent of the text read is determined by the valid characters and the flags.
            </summary>
            <param name="validChars">A string of the valid characters to consider returning</param>
            <param name="ripFlags">Define common validChars values and whether to rip forwards or backwards from the cursor position</param>
            <returns>The text read from the buffer</returns>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAEditPosition.Save">
            <summary>
            Pushes the current caret position onto a stack of saved positions
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAEditPosition.Search(System.String,System.Boolean,System.Boolean,System.Boolean,Borland.Studio.ToolsAPI.OTASearchDirection,System.Int32@)">
            <summary>
            Performs the search according to the specified parameters
            </summary>
            <param name="pattern">The search text or regular expression</param>
            <param name="caseSensitive">Whether the search is case sensitive</param>
            <param name="regularExpression">Whether the supplied search pattern is a regular expression</param>
            <param name="wholeFile">If wholeFile parameter is true, the entire file is searched. If false, the selected block is searched; if there is no block, the search fails.</param>
            <param name="direction">The direction to search</param>
            <param name="errorCode">If the search cannot be performed, an error code is stored in the errorCode parameter.
            If the search can be performed, errorCode is set to zero, even if the search cannot find a match.</param>
            <returns>Returns true if the search found a match or false if the user canceled the Find Text dialog box, the search could not be performed due to ill-formed parameters, or if the search failed to find a match.</returns>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAEditPosition.Search">
            <summary>
            Show the IDE seach dialog
            </summary>
            <returns>Returns true if the search found a match or false if the user canceled the Find Text dialog box, the search could not be performed due to ill-formed parameters, or if the search failed to find a match.</returns>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAEditPosition.SearchAgain">
            <summary>
            Repeats the most recent search
            </summary>
            <returns>Returns true if the search found a match or false otherwise</returns>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAEditPosition.Tab(System.Int32)">
            <summary>
            Move the caret to a tab stop position.
            </summary>
            <param name="magnitude">The number of tab stops to move. Positive values move to the right; negative values move to the left.</param>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTAEditPosition.Character">
            <summary>
            Return the character right after the cursor
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTAEditPosition.Column">
            <summary>
            Returns the column number of the caret position. Tab characters are expanded when computing the column. The leftmost column number is 1.
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTAEditPosition.IsSpecialCharacter">
            <summary>
            Returns true if the character under the caret is not white space or a word character, that is, a punctuation or other symbol character.
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTAEditPosition.IsWhitespace">
            <summary>
            Returns true if the character under the cursor is a blank or a tab. Note that it returns false for linefeed and carriage return.
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTAEditPosition.IsWordCharacter">
            <summary>
            Returns true if the character under the cursor is a digit, letter, or other alphanumeric character.
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTAEditPosition.LastRow">
            <summary>
            LastRow returns the number of the last row, that is, the number of rows in the buffer.
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTAEditPosition.ReplaceOptions">
            <summary>
            Not implemented yet
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTAEditPosition.Row">
            <summary>
            Row returns the row number of the caret position. The first row is 1.
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTAEditPosition.SearchOptions">
            <summary>
            Not implemented yet
            </summary>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.OTASyntaxAttributes">
            <summary>
            Used by <see cref="M:Borland.Studio.ToolsAPI.IOTAEditView.GetAttributeAtPos(Borland.Studio.ToolsAPI.OTAEditPos,System.Boolean,System.Int32@,System.Int32@)"/> to
            return the syntax element at a given edit position
            </summary>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.OTALineFlags">
            <summary>
            Used by <see cref="M:Borland.Studio.ToolsAPI.IOTAEditView.GetAttributeAtPos(Borland.Studio.ToolsAPI.OTAEditPos,System.Boolean,System.Int32@,System.Int32@)"/> to return
            the line state at a given edit position
            </summary>
        </member>
        <member name="F:Borland.Studio.ToolsAPI.OTALineFlags.lfBackgroundBkpt">
            <summary>
            Breakpoint only valid in a non-active process
            </summary>
        </member>
        <member name="F:Borland.Studio.ToolsAPI.OTALineFlags.lfBackgroupEIP">
            <summary>
            Execution point only valid in a non-active process
            </summary>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.OTAOperation">
            <summary>
            Used to signify something being inserted/removed in the IDE
            </summary>
        </member>
        <member name="F:Borland.Studio.ToolsAPI.OTAOperation.opInsert">
            <summary>
            Notification value when an item is added
            </summary>
        </member>
        <member name="F:Borland.Studio.ToolsAPI.OTAOperation.opRemove">
            <summary>
            Notification value when an item is removed
            </summary>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.IOTAEditView">
            <summary>
            A view/window into a source editor (there can be many).  Do not hold onto these
            views for very long unless you have a notifier registered with the
            <see cref="T:Borland.Studio.ToolsAPI.IOTASourceEditor"/> so you can determine when the underlying view is destroyed.
            Many operations on the edit view do not automatically repaint the view.  Call
            <see cref="M:Borland.Studio.ToolsAPI.IOTAEditView.Paint"/> after you are done modifying the view to force a repaint.
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAEditView.PosToCharPos(System.Int32)">
            <summary>
            Converts a linear buffer offset position to a CharPos
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAEditView.CharPosToPos(Borland.Studio.ToolsAPI.OTACharPos)">
            <summary>
            Convert a CharPos to a linear buffer offset
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAEditView.ConvertPos(System.Boolean,Borland.Studio.ToolsAPI.OTAEditPos@,Borland.Studio.ToolsAPI.OTACharPos@)">
            <summary>
            Convert between a EdPos and a CharPos
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAEditView.GetAttributeAtPos(Borland.Studio.ToolsAPI.OTAEditPos,System.Boolean,System.Int32@,System.Int32@)">
            <summary>
            Return the token attributes at the given EdPos. If IncludeMargin is true,
            the attribute at the right margin line is the margin line attribute, else
            it returns the actual char attribute
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAEditView.SameView(Borland.Studio.ToolsAPI.IOTAEditView)">
            <summary>
            Returns true if this interface instance is connected to the same
            underlying view as the indicated instance.  You must use this method
            in order to test for equality between views since several interface
            instances may share a single view.
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAEditView.BookmarkGoto(System.Int32)">
            <summary>
            BookmarkGoto moves the cursor to the bookmark position.
            </summary>
            <param name="bookmarkID">The bookmarkID parameter must be in the range 0 to 19. The source editor
            only shows bookmarks 0 through 9, but you can define hidden boormarks with ids 10 through 19.</param>
            <returns>The return value is true for success or false if the bookmark is not defined.</returns>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAEditView.BookmarkRecord(System.Int32)">
            <summary>
            BookmarkRecord saves the cursor position in a bookmark. The old bookmark value is discarded.
            </summary>
            <param name="bookmarkID">Must be in the range 0 to 19.</param>
            <returns>The return value is true for success or false for failure. Note that an
            invalid bookmarkID is not considered failure; instead the call to BookmarkRecord is silently ignored.</returns>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAEditView.BookmarkToggle(System.Int32)">
            <summary>
            BookmarkToggle moves the cursor to the bookmark position and changes the bookmark
            to store the old cursor position.
            </summary>
            <param name="bookmarkID">Must be in the range 0 to 19.</param>
            <returns>The return value is true for success or false for failure. If the bookmark and cursor position are identical, false is returned.</returns>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAEditView.Center(System.Int32,System.Int32)">
            <summary>
            Center scrolls the edit view so that the position given by Row and Col are in the center of the window. The cursor position is not changed.
            </summary>
            <param name="row">The new center row of the edit view</param>
            <param name="col">The new center column of the edit view</param>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAEditView.GetBookmarkPos(System.Int32)">
            <summary>
            Returns the position of a bookmark.
            </summary>
            <param name="bookmarkID">Must be in the range 0 to 19.</param>
            <returns>If the bookmarkID is invalid, the position returned is { 0, 0 }.</returns>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAEditView.MoveCursorToView">
            <summary>
            MoveCursorToView changes the cursor position so it is visible in the view. This function is useful if you scroll the view to display a block or to highlight some text.
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAEditView.MoveViewToCursor">
            <summary>
            MoveViewToCursor scrolls the view so the cursor becomes visible.
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAEditView.PageDown">
            <summary>
            PageDown scrolls the view down one page. Calling PageDown at the end of the buffer has no effect.
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAEditView.PageUp">
            <summary>
            PageUp scrolls the view up one page. Calling PageUp at the start of the buffer has no effect.
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAEditView.Paint">
            <summary>
            After scrolling or repositioning the view, call Paint to ensure the view is updated properly.
            The view is not automatically repainted after each scroll to reduce the visual disruption when
            multiple calls are required to reach the final position.
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAEditView.Scroll(System.Int32,System.Int32)">
            <summary>
            Scrolls the edit view.
            </summary>
            <param name="deltaRow">The vertical scroll amount. Positive numbers scroll down and negative numbers scroll up.</param>
            <param name="deltaCol">The horizontal scroll amount. Positive numbers scroll to the right and negative numbers scroll to the left.</param>
            <returns>The vertical scroll amount needed to return to the previous position, that is, –DeltaRow.</returns>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAEditView.SetTopLeft(System.Int32,System.Int32)">
            <summary>
            SetTopLeft scrolls the edit view to put a specific edit position in the top, left corner of the view.
            </summary>
            <param name="topRow">The new top row number for the view</param>
            <param name="leftCol">The new left column number for the view</param>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAEditView.SetTempMsg(System.String)">
            <summary>
            SetTempMsg displays a text message in the edit window’s status bar. The message is temporary and
            the status bar returns when the use does something, such as move the cursor or edit text.
            </summary>
            <param name="msg">The text to display</param>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTAEditView.CursorPos">
            <summary>
            The current cursor position
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTAEditView.TopPos">
            <summary>
            The current top visible position
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTAEditView.ViewSize">
            <summary>
            Get size of the visible portion of the view in character cells
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTAEditView.Block">
            <summary>
            Block returns the block selection interface. The block represents a range of text selected in the editor.
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTAEditView.BottomRow">
            <summary>
            BottomRow returns the line number of the bottom row visible in the edit view.
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTAEditView.Buffer">
            <summary>
            Buffer returns the buffer for the editor view. The buffer interface permits access to the file contents. Multiple edit views might refer to the same edit buffer.
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTAEditView.LastEditColumn">
            <summary>
            LastEditColumn returns the column number for the user’s most recent action in the edit view.
            The action is not necessarily an edit, but might also be a cursor movement, copying text, etc.
            An editor notifier that responds to the Modified notification might use the last edit position
            to help detect what actually changed.
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTAEditView.LastEditRow">
            <summary>
            LastEditRow returns the row number for the user’s most recent action in the edit view.
            The action is not necessarily an edit, but might also be a cursor movement, copying text,
            etc. An editor notifier that responds to the Modified notification might use the last edit
            position to help detect what actually changed.
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTAEditView.LeftColumn">
            <summary>
            LeftColumn returns the column number of the left edge of the edit view. The first column
            number is 1. LeftColumn is higher than 1 if the user scrolled the window horizontally.
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTAEditView.Position">
            <summary>
            Position returns an <see cref="T:Borland.Studio.ToolsAPI.IOTAEditPosition"/> interface. The position represents the caret position in the editor.
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTAEditView.RightColumn">
            <summary>
            RightColumn returns the column number of the right edge of the edit view.
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTAEditView.TopRow">
            <summary>
            TopRow returns the line number of the first visible row in the edit view. The first line of the buffer is 1. TopRow is higher than 1 if the user has scrolled the window vertically.
            </summary>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.IOTAElideActions">
            <summary>
            IOTAElideActions is implemented by <see cref="T:Borland.Studio.ToolsAPI.IOTAEditView"/> to control code folding
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAElideActions.ElideNearestBlock">
            <summary>
            Fold nearest elision
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAElideActions.UnElideNearestBlock">
            <summary>
            Unfold nearest elision
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAElideActions.UnElideAllBlocks">
            <summary>
            Unfold all blocks
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAElideActions.EnableElisions">
            <summary>
            Enable/disable folding based on the current environment option setting
            </summary>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.IOTAEditor">
            <summary>
            Generic editor in the IDE.  It might also be an <see cref="T:Borland.Studio.ToolsAPI.IOTASourceEditor"/>,
            <see cref="T:Borland.Studio.ToolsAPI.IOTAFormEditor"/>, etc.
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAEditor.MarkModified">
            <summary>
            Mark this editor modified.  The associated module will also be modified
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAEditor.Show">
            <summary>
            Show this editor.  If no views are active, at least one will be created
            </summary>
        </member>
        <member name="E:Borland.Studio.ToolsAPI.IOTAEditor.BeforeSave">
            <summary>
            Occurs when the editor is about to be saved.
            </summary>
        </member>
        <member name="E:Borland.Studio.ToolsAPI.IOTAEditor.AfterSave">
            <summary>
            Occurs after the editor has been saved.
            </summary>
        </member>
        <member name="E:Borland.Studio.ToolsAPI.IOTAEditor.Closed">
            <summary>
            Occurs after the editor has been closed. 
            You should release any holds on the IOTAEditor that you 
            have at this time to free memory faster.
            </summary>
        </member>
        <member name="E:Borland.Studio.ToolsAPI.IOTAEditor.Modified">
            <summary>
            Occurs when the editor has been modified.
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTAEditor.FileName">
            <summary>
            Returns the actual filename of this module editor. Rename through
            <see cref="T:Borland.Studio.ToolsAPI.IOTAModule"/>.
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTAEditor.IsModified">
            <summary>
            Returns the editor specific modified status.
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTAEditor.Module">
            <summary>
            Returns the associated <see cref="T:Borland.Studio.ToolsAPI.IOTAModule"/>.
            </summary>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.IOTAEditorContent">
            <summary>
            If an IOTAEditor implements this interface, then it supports direct access
            to the memory buffer used to store the editor content
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAEditorContent.ResetDiskAge">
            <summary>
            Call this function to reset the internal setting of the editor's content
            disk age value.  The disk age is the age of the time when it was initially
            loaded from disk or the last time the file was saved.
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTAEditorContent.Content">
            <summary>
            get - Returns the current buffer content for the corresponding editor
            set - Sets the current buffer content for the corresponding editor.
            NOTE: this will do a wholesale replacement of the content and all
                  previous contents *will* be lost.  Use this at your own risk.
                  You have been warned.
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTAEditorContent.ContentAge">
            <summary>
            get - Returns the current age of the buffer.  This is the datetime
            of the last actual modification of the file.  If the file has not
            been modified or has already been saved, this will match the file
            time on disk.
            </summary>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.ViewActivatedEventArgs">
            <summary>
            Event args for the <see cref="E:Borland.Studio.ToolsAPI.IOTASourceEditor.ViewActivated"/> event
            </summary>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.ViewNotificationEventArgs">
            <summary>
            Event args for the <see cref="E:Borland.Studio.ToolsAPI.IOTASourceEditor.ViewNotification"/> event
            </summary>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.ViewActivatedEventHandler">
            <summary>
            Event signature for <see cref="E:Borland.Studio.ToolsAPI.IOTASourceEditor.ViewActivated"/>
            </summary>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.ViewNotificationEventHandler">
            <summary>
            Event signature for <see cref="E:Borland.Studio.ToolsAPI.IOTASourceEditor.ViewNotification"/>
            </summary>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.IOTASourceEditor">
            <summary>
            IOTASourceEditor represents a single source code file. Some <see cref="T:Borland.Studio.ToolsAPI.IOTAEditor"/>s
            implement this interface.
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTASourceEditor.CreateReader">
            <summary>
            Create and return an <see cref="T:Borland.Studio.ToolsAPI.IOTAFileReader"/>
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTASourceEditor.CreateWriter">
            <summary>
            Create and return an <see cref="T:Borland.Studio.ToolsAPI.IOTAFileWriter"/>
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTASourceEditor.GetEditView(System.Int32)">
            <summary>
            Return the indexed view
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTASourceEditor.GetSubViewIdentifier(System.Int32)">
            <summary>
            Returns a view identifier for the given sub-view index.  This may just be
            the specific filename of the view or some other unique identifier
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTASourceEditor.SwitchToView(System.Int32)">
            <summary>
            Switches the editor to the specified view by view index
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTASourceEditor.SwitchToView(System.String)">
            <summary>
            Switches the editor to the specified view by view identifier
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTASourceEditor.EditViewCount">
            <summary>
            Return the number of active views on this editor
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTASourceEditor.LinesInBuffer">
            <summary>
            Returns the total number of lines in this source editor
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTASourceEditor.SubViewCount">
            <summary>
            Get the number of sub-Views on this editor.  This editor itself may be a
            sub view and may not be at index 0.  NOTE: This function will
            return 0 if this SourceEditor is not visible in any editor window.  You must
            call <see cref="M:Borland.Studio.ToolsAPI.IOTAEditor.Show"/> before using these functions to manipulate the views.
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTASourceEditor.SubViewIndex">
            <summary>
            Returns the sub-view index for this editor.  If this is the main source
            editor, its index will always be 0.  However for modules with more than
            one source editor, this may return > 0. (ie. Managed .cpp files with an
            associated .h file)
            </summary>
        </member>
        <member name="E:Borland.Studio.ToolsAPI.IOTASourceEditor.ViewNotification">
            <summary>
            Occurs when an <see cref="T:Borland.Studio.ToolsAPI.IOTAEditView"/> is created or removed for this source editor
            </summary>
        </member>
        <member name="E:Borland.Studio.ToolsAPI.IOTASourceEditor.ViewActivated">
            <summary>
            Occurs when an <see cref="T:Borland.Studio.ToolsAPI.IOTAEditView"/> is activated (focused) for this source editor
            </summary>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.IOTAServiceProvider">
            <summary>
            Allows the programmer to add/remove services to a given object.
            Some of the other IOTA* interfaces descend from this to provide other services.
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAServiceProvider.AddService(System.Type,System.Object)">
            <summary>
            Adds a service to the given object
            </summary>
            <param name="serviceType">The service Type to add</param>
            <param name="serviceHandler">The object that implements the service</param>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAServiceProvider.GetService(System.Type)">
            <summary>
            Gets a given service.
            </summary>
            <param name="serviceType"></param>
            <returns>The service, if it is supported</returns>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAServiceProvider.RemoveService(System.Type)">
            <summary>
            Removes a previously added service.
            </summary>
            <param name="serviceType">The service Type to remove</param>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTAServiceProvider.ServiceContainer">
            <summary>
            Retrieves the service container used by this provider.
            </summary>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.RenameNotificationEventArgs">
            <summary>
            Event args for the <see cref="E:Borland.Studio.ToolsAPI.IOTAModule.BeforeRename"/> event
            </summary>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.RenameNotificationEventHandler">
            <summary>
            Event signature for <see cref="E:Borland.Studio.ToolsAPI.IOTAModule.BeforeRename"/>
            </summary>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.IOTAModule">
            <summary>
            Represents an open module in the IDE. A module consists of a main file
            and 0 or more child files.
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAModule.Close(System.Boolean)">
            <summary>
            Attempt to close this module. Returns true if successful and all references
            to this module must be released or false if this module was not closed.
            Close allows an add-in to force a module closed regardless of
            whether or not it is modified.  If forceClosed is False, then calling
            this method has the same behaviour as Close.
            </summary>
            <param name="forceClosed">If true, forces the module to be closed no matter what.</param>
            <returns>True if it worked, false otherwise</returns>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAModule.Save(System.Boolean,System.Boolean)">
            <summary>
            Save the module.
            </summary>
            <param name="changeName">If true, invokes the SaveAs logic.</param>
            <param name="forceSave">If true, it will not ask the user to save the module if modified.</param>
            <returns>Returns false if canceled or an error occurred.</returns>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAModule.ModuleFileEditors(System.Int32)">
            <summary>
            Returns the associated file editor.
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAModule.MarkModified">
            <summary>
            MarkModifed will mark this module as "modified" without actually indicating
            *why* is it modified (which will cause internal file dates to remain constant).
            This *will* force the IDE to ask to save this module when the user attempts
            to close it.  It will also clear the "discardability" of a new unnamed
            module such as when File|New|Application is selected. }
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAModule.GetOwnerModule(System.Int32)">
            <summary>
            Return the Indexed module that owns this module. If this is an <see cref="T:Borland.Studio.ToolsAPI.IOTAProject"/>
            then these two methods may not return and owner in the case where this is
            a package project and it is not a member of the currently open project group. }
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAModule.Show">
            <summary>
            Call show to show the default editor for the module.
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAModule.ShowFileName(System.String)">
            <summary>
            Call ShowFileName to show the editor for the given filename associated
            with the module.
            </summary>
        </member>
        <member name="E:Borland.Studio.ToolsAPI.IOTAModule.BeforeSave">
            <summary>
            Occurs when the module is about to be saved.
            </summary>
        </member>
        <member name="E:Borland.Studio.ToolsAPI.IOTAModule.AfterSave">
            <summary>
            Occurs after the module has been saved.
            </summary>
        </member>
        <member name="E:Borland.Studio.ToolsAPI.IOTAModule.Closed">
            <summary>
            Occurs after the module has been closed.
            You should release any holds on the IOTAModule that you
            have at this time to free memory faster.
            </summary>
        </member>
        <member name="E:Borland.Studio.ToolsAPI.IOTAModule.Modified">
            <summary>
            Occurs when the module has been modified.
            </summary>
        </member>
        <member name="E:Borland.Studio.ToolsAPI.IOTAModule.Renamed">
            <summary>
            Occurs when the module is renamed.
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTAModule.FileName">
            <summary>
            Return the filename associated with this module.  This is only the base
            name used by the IDE.  Header source and forms are obtained other ways.
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTAModule.FileSystem">
            <summary>
            The FileSystem used by this module.
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTAModule.ModuleFileCount">
            <summary>
            Returns the number of associated files (eg. AspForm.cs and AspForm.aspx).
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTAModule.CurrentEditor">
            <summary>
            CurrentEditor returns the topmost editor associated with this module.
            If the form editor was the last editor focused, then that is returned,
            likewise, if one of the code editor was the last focused then that one
            is returned. }
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTAModule.OwnerModuleCount">
            <summary>
            Return the number of open modules that own this module.
            </summary>
        </member>
        <member name="E:Borland.Studio.ToolsAPI.IOTAModule.BeforeRename">
            <summary>
            Call ShowFileName to show the editor for the given filename associated
            with the module.
            </summary>
        </member>
        <member name="E:Borland.Studio.ToolsAPI.IOTAModule.AfterRename">
            <summary>
            Call ShowFileName to show the editor for the given filename associated
            with the module.
            </summary>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.IOTADotNetModule">
            <summary>
            .NET specific functionality for modules.
            Use GetService on an <see cref="T:Borland.Studio.ToolsAPI.IOTAModule"/> to acquire the
            IOTADotNetModule, if the IOTAModule is a IOTADotNetModule, it will return non-null.
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTADotNetModule.ShowCode">
            <summary>
            Shows the source code for this module.
            </summary>
            <returns>True if it did show the code.</returns>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTADotNetModule.ShowCode(System.Int32)">
            <summary>
            Shows the source code for this module at the given line.
            </summary>
            <param name="lineNumber">The line number to show the code at, and place the cursor on.</param>
            <returns>True if it worked.</returns>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTADotNetModule.ShowCode(System.Int32,System.Int32)">
            <summary>
            Shows the source code, at the line and col.
            </summary>
            <param name="lineNumber">Line to put the cursor on.</param>
            <param name="colNumber">Column to put the cursor on.</param>
            <returns>True if it worked.</returns>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTADotNetModule.ShowCode(System.Int32,System.Int32,System.Int32)">
            <summary>
            Shows the source code, at the line and col.
            </summary>
            <param name="topLineNumber">The top most line to show in the editor, if -1, then it is a norma
            ShowCode </param>
            <param name="lineNumber">The line to show the cursor at.</param>
            <param name="colNumber">The column to put the cursor at.</param>
            <returns>True if it worked.</returns>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTADotNetModule.ShowCodeOffset(System.Int32)">
            <summary>
            Shows the source code given a buffer offset (i.e. the number of
            bytes from the beginning of the file.
            </summary>
            <param name="offset">The number of bytes from the beginning of the file.</param>
            <returns>True if it worked.</returns>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTADotNetModule.ShowDesigner">
            <summary>
            Shows the form designer.
            </summary>
            <returns>True, if it worked.</returns>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTADotNetModule.FlushDesigner">
            <summary>
            Forces the designer to flush out at this time.
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTADotNetModule.ReloadDesigner(System.Boolean)">
            <summary>
            Reload the designer if needed because of change to code or markup file.
            Does not return until reload is complete if synchronous is true
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTADotNetModule.CodeGeneratorOptions">
            <summary>
            Returns code dom generator options for this module. This is used
            by code formatters.
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTADotNetModule.RootComponentClassName">
            <summary>
            The RootComponentClassName of the class being designed.
            For instance, MyNamespace.MyForm.
            May be an empty string if there is not one.
            Warning: It is not recommended that you set this value.
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTADotNetModule.HasDesignableType">
            <summary>
            Returns true if this module has a designable type.
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTADotNetModule.DesignerActive">
            <summary>
            Finds out if the designer is active or not.
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTADotNetModule.DesignerHost">
            <summary>
            Access to the <see cref="T:System.ComponentModel.Design.IDesignerHost"/>, if HasDesignableType returned true,
            and the designer was shown at least one
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTADotNetModule.MainSourceFileName">
            <summary>
            Provides access to the main source's file name (the .cs file, in general).
            </summary>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.IOTADotNetProject">
            <summary>
            .NET-specific project features such as references and licenses.
            Use <see cref="M:Borland.Studio.ToolsAPI.IOTAServiceProvider.GetService(System.Type)"/> to obtain a IOTADotNetProject interface.
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTADotNetProject.References">
            <summary>
            Access to the references in this project.
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTADotNetProject.LicenseProvider">
            <summary>
            Return the LicenseProvider for the project.
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTADotNetProject.ConfigurationProvider">
            <summary>
            Returns the configuration provider for the project.
            </summary>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.IOTAReference">
            <summary>
            Details about a project reference
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTAReference.CopyLocal">
            <summary>
            Determines if the reference should be copied to the project's output
            directory or not.
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTAReference.Name">
            <summary>
            The file name without a path
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTAReference.Path">
            <summary>
            The full path to this reference. It may be an invalid location if the
            reference is not valid (not found).
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTAReference.Version">
            <summary>
            The version number for this reference
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTAReference.Culture">
            <summary>
            The culture of the reference
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTAReference.ProjectGUID">
            <summary>
            Returns the GUID for the project that this reference refers to
            </summary>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.IOTAReferences">
            <summary>
            Access the .NET, COM, Project, and ActiveX references for a project
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAReferences.AddReference(System.String)">
            <summary>
            Add a .NET reference to the project.
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAReferences.AddComReference(System.String,System.String,System.String)">
            <summary>
            Add a COM reference to the project.
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAReferences.AddActiveXReference(System.String,System.String,System.String)">
            <summary>
            Adds an ActiveX reference to the project. Generates a wrapper around the
            Controls found in the type library for use in the IDE.
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAReferences.AddProjectReference(Borland.Studio.ToolsAPI.IOTAProject)">
            <summary>
            Add a project to project reference (currently, not implemented) that is in the current
            project group.
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAReferences.Contains(System.String)">
            <summary>
            Find out if the references contain a given reference.
            </summary>
            <param name="fileName">The filename to see if it contains.
            May be a full path, or relative path, but must include the .dll extension</param>
            <returns>True, if the project contains a reference to the assembly.</returns>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTAReferences.Count">
            <summary>
            The number of references available.
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTAReferences.Item(System.Int32)">
            <summary>
            Access to an individual reference.
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTAReferences.Project">
            <summary>
            Access to the project for which the references will be added to.
            </summary>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.IOTAModuleInfo">
            <summary>
            Gives information about a module that the project contains.
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAModuleInfo.OpenModule">
            <summary>
            Opens and returns the <see cref="T:Borland.Studio.ToolsAPI.IOTAModule"/> associated with this IOTAModuleInfo
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTAModuleInfo.Name">
            <summary>
            Returns the ModuleName
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTAModuleInfo.FileName">
            <summary>
            Returns the module file name.
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTAModuleInfo.ModuleType">
            <summary>
            Returns the module type, as a string.
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTAModuleInfo.ClassName">
            <summary>
            Retrieves the fully qualified name of the class being disigned, if any.
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTAModuleInfo.DesignClassName">
            <summary>
            Retrieves the base type of the class being designed; the designer shown and
            created is actually of this type.
            </summary>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.IOTACodeDomProvider">
            <summary>
            Use GetService on <see cref="T:Borland.Studio.ToolsAPI.IOTAModule"/> to retrieve a IOTACodeDomProvider for it.
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTACodeDomProvider.CodeDomFile">
            <summary>
            Access to the code dom.
            </summary>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.ModuleAddedRemovedEventArgs">
            <summary>
            Event args for the <see cref="E:Borland.Studio.ToolsAPI.IOTAProject.ModuleAdded"/> event
            Event args for the <see cref="E:Borland.Studio.ToolsAPI.IOTAProject.ModuleRemoved"/> event
            </summary>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.ModuleRenamedEventArgs">
            <summary>
            Event args for the <see cref="E:Borland.Studio.ToolsAPI.IOTAProject.ModuleRenamed"/> event
            </summary>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.ModuleAddedRemovedEventHandler">
            <summary>
            Event signature for <see cref="E:Borland.Studio.ToolsAPI.IOTAProject.ModuleAdded"/> and <see cref="E:Borland.Studio.ToolsAPI.IOTAProject.ModuleRemoved"/>
            </summary>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.ModuleRenamedEventHandler">
            <summary>
            Event signature for <see cref="E:Borland.Studio.ToolsAPI.IOTAProject.ModuleRenamed"/>
            </summary>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.IOTAProject">
            <summary>
            Representation of a project in the IDE.
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAProject.GetModuleInfo(System.Int32)">
            <summary>
            Return the indexed owned Module Info.
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAProject.GetModuleFileName(System.Int32)">
            <summary>
            Returns the indexed FileName of the Module owned by this project.
            MUCH faster than using GetModuleInfo(index).FileName, and consumes
            less memory.
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAProject.AddFile(System.String)">
            <summary>
            Adds a file to the project.
            </summary>
            <param name="fileName">The filename to add to the project.</param>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAProject.AddFile(System.String,System.String)">
            <summary>
            Adds a file to the project with a given parent file.
            </summary>
            <param name="fileName">The file to add</param>
            <param name="parentFile">The parent of this file. May be a full or relative file name.</param>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAProject.RemoveFile(System.String)">
            <summary>
            Call this function to remove an arbitrary file from the project.  This
            must be a fully qualified filename.
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAProject.FileInProject(System.String)">
            <summary>
            Find out if a given file is in the project or not.
            </summary>
            <param name="fileName">The filename to search for.</param>
            <returns>true if it is in the project, else false.</returns>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAProject.Activate">
            <summary>
            Makes this project the active project.
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAProject.Rename(System.String,System.String)">
            <summary>
            Rename a file that is in the project
            </summary>
        </member>
        <member name="E:Borland.Studio.ToolsAPI.IOTAProject.ModuleAdded">
            <summary>
            Occurs when a module is added to the project
            </summary>
        </member>
        <member name="E:Borland.Studio.ToolsAPI.IOTAProject.ModuleRemoved">
            <summary>
            Occurs when a module is removed from the project
            </summary>
        </member>
        <member name="E:Borland.Studio.ToolsAPI.IOTAProject.ModuleRenamed">
            <summary>
            Occurs when a module is renamed in the project
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTAProject.ModuleCount">
            <summary>
            Returns the number of owned modules.
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTAProject.ProjectOptions">
            <summary>
            Return the project options.
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTAProject.ProjectBuilder">
            <summary>
            Return the project builder.
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTAProject.ProjectGUID">
            <summary>
            Return the project builder.
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTAProject.Personality">
            <summary>
            returns this project's personality
            </summary>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.IOTAProjectLicenseProvider">
            <summary>
            A project's license provider.
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAProjectLicenseProvider.AddLicensedControl(System.String)">
            <summary>
            Adds a licensed control to the licx file
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAProjectLicenseProvider.Clear">
            <summary>
            Clears all the licensed controls from the licx file
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTAProjectLicenseProvider.LicensedControlCount">
            <summary>
            Returns the number of licensed controls in the project
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTAProjectLicenseProvider.Item(System.Int32)">
            <summary>
            Returns the indexd licensed controls
            </summary>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.IOTAProjectConfigurationProvider">
            <summary>
            A project's configuration provider (ie. the app.condig reader/writer).
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAProjectConfigurationProvider.ReadProjectConfigData">
            <summary>
            Returns the contents of the app.config file as a string
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAProjectConfigurationProvider.WriteProjectConfigData(System.String)">
            <summary>
            Sets the contents of the app.config file as a string
            </summary>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.OTACompileMode">
            <summary>
            The different compilation modes used by <see cref="T:Borland.Studio.ToolsAPI.IOTAProjectBuilder"/>
            </summary>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.IOTAProjectBuilder">
            <summary>
            IOTAProjectBuilder lets a wizard compile or build a project. To obtain a
            project builder interface, start with a project interface, and use its
            ProjectBuilder property. A project builder is tied to a specific project,
            namely, the project used to obtain the project builder.
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAProjectBuilder.BuildProject(Borland.Studio.ToolsAPI.OTACompileMode,System.Boolean)">
            <summary>
            True if successfully built.  If Wait then the compile progress dialog
            waits for the user press OK.  If False, it does not wait if successful.
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAProjectBuilder.BuildProject(Borland.Studio.ToolsAPI.OTACompileMode,System.Boolean,System.Boolean)">
            <summary>
            True if successfully built.  If Wait then the compile progress dialog
            waits for the user press OK.  If False, it does not wait if successful.
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTAProjectBuilder.ShouldBuild">
            <summary>
            True if the project is out of date and needs to be built
            </summary>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.OTATypeKind">
            <summary>
            The types used to return the value of various IDE options in the IDE option lists
            </summary>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.IOTAOptionNames">
            <summary>
            Obtain the names and types of the options in an option list
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAOptionNames.GetName(System.Int32)">
            <summary>
            Returns the index'd name of the item
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAOptionNames.GetType(System.Int32)">
            <summary>
            Returns the index'd type of the item
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTAOptionNames.Count">
            <summary>
            Returns the count of items
            </summary>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.IOTAOptions">
            <summary>
            Access a list of IDE options
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAOptions.EditOptions">
            <summary>
            Opens the options dialog
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAOptions.GetOptionValue(System.String)">
            <summary>
            Get the value of the named option.
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAOptions.SetOptionValue(System.String,System.Object)">
            <summary>
            Set the value of the named option.
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTAOptions.OptionNames">
            <summary>
            Get the list of available options for this option structure
            </summary>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.IOTAProjectOptions">
            <summary>
            IOTAProjectOptions gets or sets a project’s options. An option has
            a name, type, and value. See <see cref="T:Borland.Studio.ToolsAPI.IOTAOptions"/> for details.
            </summary>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.IOTAProjectGroup">
            <summary>
            IOTAProjectGroup is a module that stores information about project
            groups. Some modules implement IOTAProjectGroup.
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAProjectGroup.AddNewProject">
            <summary>
            Invoke the Add New Project Dialog
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAProjectGroup.AddExistingProject">
            <summary>
            Invoke the Open New Project Dialog
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAProjectGroup.RemoveProject(Borland.Studio.ToolsAPI.IOTAProject)">
            <summary>
            Remove a given project from the project group.
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTAProjectGroup.ActiveProject">
            <summary>
            Set the active project.
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTAProjectGroup.ProjectCount">
            <summary>
            The number of projects in this project group.
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTAProjectGroup.Item(System.Int32)">
            <summary>
            Access to an individual project in this project group.
            </summary>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.IOTAProjectDependenciesList">
            <summary>
            Add/remove projects form the dependency list
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAProjectDependenciesList.AddProject(Borland.Studio.ToolsAPI.IOTAProject)">
            <summary>
            Add a project to the list
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAProjectDependenciesList.RemoveProject(Borland.Studio.ToolsAPI.IOTAProject)">
            <summary>
            Remove a project from the list
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTAProjectDependenciesList.ProjectCount">
            <summary>
            Returns the number of projects in the list
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTAProjectDependenciesList.Item(System.Int32)">
            <summary>
            Returns the index'd project in the list
            </summary>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.IOTAProjectGroupProjectDependencies">
            <summary>
            Get or set the dependencies for a project group
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAProjectGroupProjectDependencies.GetEmptyProjectDependenciesList">
            <summary>
            Returns an empty IOTAProjectDependenciesList
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAProjectGroupProjectDependencies.GetProjectDependencies(Borland.Studio.ToolsAPI.IOTAProject)">
            <summary>
            Return current dependencies AProject depends upon
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAProjectGroupProjectDependencies.GetValidProjectDependencies(Borland.Studio.ToolsAPI.IOTAProject)">
            <summary>
            Return the projects that AProject can validly depend on.  This
            function will not return
            any circular references.
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAProjectGroupProjectDependencies.SetProjectDependencies(Borland.Studio.ToolsAPI.IOTAProject,Borland.Studio.ToolsAPI.IOTAProjectDependenciesList)">
            <summary>
            Set the dependencies on AProject
            </summary>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.IOTASearchPaths">
            <summary>
            Represents a collection of search paths.
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTASearchPaths.Add(System.String)">
            <summary>
            Add a given path. Currently case sensitive.
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTASearchPaths.Remove(System.String)">
            <summary>
            Remove the given path. Case sensitive.
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTASearchPaths.Clear">
            <summary>
            Clear all search paths.
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTASearchPaths.ExpandedSearchPath(System.Int32)">
            <summary>
            Expands environment variables in a given path at index.
            </summary>
            <param name="index">The index of the search path to retrieve.</param>
            <returns>The search path at index, with environment variables expanded.</returns>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTASearchPaths.Count">
            <summary>
            The number of paths
            </summary>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.IOTAAssemblySearchPathService">
            <summary>
            Access to the global search paths for finding assemblies in the IDE.
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAAssemblySearchPathService.Load">
            <summary>
            Loads the state from a persisted file, clearing any modifications possibly made.
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAAssemblySearchPathService.Save">
            <summary>
            Saves the current state to a persisted file.
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAAssemblySearchPathService.IsIgnoredDirectory(System.String)">
            <summary>
            Indicate whether this directory is associated with a earlier version of Delphi that
            remains installed.
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAAssemblySearchPathService.AddIgnoredDirectory(System.String)">
            <summary>
            Add to the list of ingored directories.
            </summary>
            <param name="path"></param>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.IOTAPersistenceManager">
            <summary>
            Get access to the IDE's settings file stored as XML
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAPersistenceManager.SaveDocument(System.Xml.XmlDocument)">
            <summary>
            Saves a given document to local settings.
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAPersistenceManager.GetDocument">
            <summary>
            The Document to load/save settings from. It is stored and loaded from:
            C:\Documents and Settings\(username)\Application Data\Borland\(product)\(version)\ApplicationSettings.xml
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAPersistenceManager.GetOriginalDocument">
            <summary>
            The original document that settings came from. Allows you to "reset" Document
            with your original settings. This is loaded from the bin directory.
            </summary>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.ToolboxItemEventArgs">
            <summary>
            Base class for several toolbox event args classes
            </summary>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.ToolboxItemAddedEventArgs">
            <summary>
            Event args for <see cref="E:Borland.Studio.ToolsAPI.IOTAToolboxServiceEvents.ToolboxItemAdded"/> event
            </summary>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.ToolboxItemEventHandler">
            <summary>
            Event signature for several toolbox events
            </summary>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.ToolboxItemAddedEventHandler">
            <summary>
            Event signature for <see cref="E:Borland.Studio.ToolsAPI.IOTAToolboxServiceEvents.ToolboxItemAdded"/>
            </summary>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.IOTAToolboxServiceEvents">
            <summary>
            Allows the listening in on <see cref="T:System.Drawing.Design.IToolboxService"/> events.
            </summary>	
        </member>
        <member name="E:Borland.Studio.ToolsAPI.IOTAToolboxServiceEvents.ToolboxItemAdded">
            <summary>
            Occurs when a <see cref="T:System.Drawing.Design.ToolboxItem"/> is added to the <see cref="T:System.Drawing.Design.IToolboxService"/>.
            The <see cref="T:Borland.Studio.ToolsAPI.ToolboxItemAddedEventArgs"/> will have the <see cref="T:System.Drawing.Design.ToolboxItem"/> added,
            and optionally the host and category, if they are not null.
            </summary>
        </member>
        <member name="E:Borland.Studio.ToolsAPI.IOTAToolboxServiceEvents.ToolboxItemRemoved">
            <summary>
            Occurs when an item is removed.
            </summary>
        </member>
        <member name="E:Borland.Studio.ToolsAPI.IOTAToolboxServiceEvents.SelectedItemUsed">
            <summary>
            Occurs when an item is used.
            </summary>
        </member>
        <member name="E:Borland.Studio.ToolsAPI.IOTAToolboxServiceEvents.ToolboxServiceRefresh">
            <summary>
            Occurs when the <see cref="M:System.Drawing.Design.IToolboxService.Refresh"/> is called.
            </summary>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.IOTAEventMethodsService">
            <summary>
            Query for the <see cref="T:Borland.Studio.ToolsAPI.IOTAEventMethodsService"/> from an <see cref="T:System.ComponentModel.Design.IDesignerHost"/> using 
            IDesignerHost.GetService(typeof(IOTAEventMethodsService)).
            </summary>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.IBorlandIDEServices">
            <summary>
            Main access to any services provided by the IDE.
            Used internally.
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IBorlandIDEServices.AddOTAExtension(System.Object)">
            <summary>
            Add an extension to BorlandIDE.Services.
            </summary>
            <param name="extension"></param>
            <returns>The index of the added extension</returns>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IBorlandIDEServices.RemoveOTAExtension(System.Int32)">
            <summary>
            Removes an extension previously added.
            </summary>
            <param name="index">The index obtained from a previous call to AddOTAExtension</param>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IBorlandIDEServices.GetService(System.Type)">
            <summary>
            Queries the IDE for a particular service.
            </summary>
            <param name="serviceType">The type of the interface to get</param>
            <returns>The implementor of the interface</returns>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.BorlandIDE">
            <summary>
            Allows access to all of the .NET Open Tools API services
            </summary>
        </member>
        <member name="F:Borland.Studio.ToolsAPI.BorlandIDE.servicesCreated">
            <summary>
            If Services is null, add a handler to this event to find out when it is created.
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.BorlandIDE.GetService(System.Type)">
            <summary>
            Retrieve a particular service. Shortcut for calling BorlandIDE.Services.GetService.
            </summary>
            <param name="serviceType">The service interface Type to obtain</param>
            <returns>THe object implementing the service</returns>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.BorlandIDE.AddService(System.Type,System.Object)">
            <summary>
            Add a particular service. Shortcut for calling BorlandIDE.Services.AddService.
            </summary>
            <param name="serviceType">The type of the service interface to add</param>
            <param name="serviceInstance">The object implementing the interface</param>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.BorlandIDE.OnServicesCreated">
            <summary>
            Used internally for firing the event. Do NOT call.
            </summary>
        </member>
        <member name="F:Borland.Studio.ToolsAPI.BorlandIDE.ms">
            <summary> Known IDE services </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.BorlandIDE.Services">
            <summary>
            Query for any IDE service using GetService ONLY.
            Do NOT use the old Borland way of "BorlandIDE.Services as IOTAxxx".
            If Services is null, add a handler to the ServicesCreated event to find out when
            it is created and available.
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.BorlandIDE.SplashScreenService">
            <summary>
            Obtain a reference to the splash screen service.  Because this might be
            initialized before the rest of the IDE interfaces are available, it is
            provided as a separate static member here.
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.BorlandIDE.ModuleServices">
            <summary> A Shortcut for accessing the <see cref="T:Borland.Studio.ToolsAPI.IOTAModuleServices"/></summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.BorlandIDE.VirtualFileService">
            <summary> A Shortcut for accessing the <see cref="T:Borland.Studio.ToolsAPI.IOTAVirtualFileService"/></summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.BorlandIDE.OTAService">
            <summary> A Shortcut for accessing the <see cref="P:Borland.Studio.ToolsAPI.BorlandIDE.OTAService"/></summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.BorlandIDE.UIService">
            <summary> A Shortcut for accessing the <see cref="T:System.Windows.Forms.Design.IUIService"/></summary>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.IOTAVirtualFileService">
            <summary>
            Allows opening files into the IDE
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAVirtualFileService.OpenFile(System.String)">
            <summary>
            Allows you to have access to a file in the editor buffer.
            You cannot have a reader and a writer open at the same time.
            DEPRECATED!
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAVirtualFileService.GetReader(System.String,System.Int32)">
            <summary> You can directly get a reader for a given file at a given offset in the file </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAVirtualFileService.GetWriter(System.String)">
            <summary> You can directly get a writer for a given file.</summary>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.IOTAVirtualFile">
            <summary>
             This is a file that can be read and modified using <see cref="T:Borland.Studio.ToolsAPI.IOTAFileReader"/> and
             <see cref="T:Borland.Studio.ToolsAPI.IOTAFileWriter"/>.
             NOTE: It is preferred that you start using IOTAVirtualFileService.GetReader
             and IOTAVirtualFileService.GetWriter, as they are faster and have
             less overhead.
             </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAVirtualFile.GetReader(System.Int32)">
            <summary>
             Return a reader for the file
             </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAVirtualFile.GetWriter">
            <summary>
             Return a writer for the file.
             </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAVirtualFile.Close">
            <summary>
             Close the file. Once a file is closed <see cref="M:Borland.Studio.ToolsAPI.IOTAVirtualFile.GetReader(System.Int32)"/> and <see cref="M:Borland.Studio.ToolsAPI.IOTAVirtualFile.GetWriter"/>
             should return null.
             </summary>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.IOTAFileReader">
            <summary>
            Allows reading from an open file
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAFileReader.Read(System.Int32,System.Int32)">
            <summary>
             Read the next up to length bytes from the file. The result can be less than length
             even before the end of file. At the end of file, Read must return 0.
             </summary>
             <param name="length">The length to read up to.</param>
             <param name="padding">Padding to add at the end of the buffer returned. Typically,
             you will pass 0.</param>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAFileReader.Close">
            <summary>
            Called when the reader is finished reading the file
            </summary>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.IOTAFileWriter">
            <summary>
             This interface is intended to modify a file in place but using a model
             that simulates a copy. All modifications need to be done linerally.
             For example, to delete text call CopyTo() to position to the location
             of the text to delete, call DeleteTo() then close the file. Closing the
             file effectively calls CopyTo() to the end of the file. To insert text
             call CopyTo() to position to the location to insert then Insert().
             By simulating a copy all offsets are in the unmodified file's offsets.
             The caller doesn't have to maintain how much text was inserted nor
             deleted.
             </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAFileWriter.CopyTo(System.Int64)">
            <summary>
             Copy to the offset in the original file
             </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAFileWriter.DeleteTo(System.Int64)">
            <summary>
             Don't copy (or delete) the text to the offset in the original file
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAFileWriter.Insert(System.String)">
            <summary>
             Insert the given text to the file at the current location.
             </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAFileWriter.Insert(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Insert the given bytes into the text file at the current location, starting
            at offset in the array and writing count bytes.
            </summary>
            <param name="bytes"></param>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAFileWriter.Close">
            <summary>
             Copy the rest of the file and then close the file.
             </summary>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.IOTACodeDomGeneratorOptions">
            <summary>
            Set the options for how CodeDom generates source code
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTACodeDomGeneratorOptions.BlankLinesBetweenMembers">
            <summary>
            If there should be a blank line between members, or not.
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTACodeDomGeneratorOptions.BracingStyle">
            <summary>
            C or default style.
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTACodeDomGeneratorOptions.ElseOnClosing">
            <summary>
            If there is an else on the closing bracket or next line.
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTACodeDomGeneratorOptions.IndentString">
            <summary>
            The string used to do an Ident
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTACodeDomGeneratorOptions.CaseSensitive">
            <summary>
            When generating a DOM, determing if case sensitivity
            is an issue or not.
            </summary>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.IOTACodeDomFile">
            <summary>
            Access the CodeDom for a .NET source module.  Obtain this interface
            using <see cref="T:Borland.Studio.ToolsAPI.IOTACodeDomProvider"/>.
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTACodeDomFile.GetDom">
            <summary>
             Get a code dom for the file this interface instance represents
             </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTACodeDomFile.WriteDom(System.CodeDom.CodeCompileUnit,Borland.Studio.ToolsAPI.IOTACodeDomGeneratorOptions)">
            <summary>
             Write the DOM to the file. This will append the contents of the DOM
             to the file. If the dom was created by GetDom for this file then only
             the changes will be written. Throws exception if the dom changes where
             not successfully written. This is most likely due to a stale DOM
             begin passed as codeDom. No changes can be made to the project
             or any file in the project while a dom returned by GetDom is active.
             </summary>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.IOTAInstalledToolboxItem">
            <summary>
            Obtain information about an installed <see cref="P:Borland.Studio.ToolsAPI.IOTAInstalledToolboxItem.ToolboxItem"/>
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTAInstalledToolboxItem.ToolboxItem">
            <summary>
            The actual <see cref="P:Borland.Studio.ToolsAPI.IOTAInstalledToolboxItem.ToolboxItem"/>
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTAInstalledToolboxItem.CategoryName">
            <summary>
            The category for the item
            </summary>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.IOTAComponentInstallService">
            <summary>
            Allows the permanent installation and removal of components into the <see cref="T:System.Drawing.Design.IToolboxService"/>.
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAComponentInstallService.ItemFromToolboxItem(System.Drawing.Design.ToolboxItem)">
            <summary>
            May return null if it isn't installed.
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAComponentInstallService.ShowInstallComponentsForm">
            <summary>
            Shows the Install Components form, which allows the user to install or remove
            components that are installed in the toolbox.
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAComponentInstallService.OnBeginUpdate">
            <summary>
            Fires the BeginUpdate event, if needed.
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAComponentInstallService.OnEndUpdate">
            <summary>
            Fires the EndUpdate event, if needed.
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTAComponentInstallService.InstalledItems">
            <summary>
            Returns all installed <see cref="T:System.Drawing.Design.ToolboxItem"/>s
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTAComponentInstallService.InstalledComponents">
            <summary>
            Returns all items as IOTAInstalledComponents, which include the
            ToolboxItem and the CategoryName for that item, and items that are not
            Checked
            </summary>
        </member>
        <member name="E:Borland.Studio.ToolsAPI.IOTAComponentInstallService.BeginUpdate">
            <summary>
            Called when the <see cref="T:Borland.Studio.ToolsAPI.IOTAComponentInstallService"/> has at least one type being installed or removed.
            </summary>
        </member>
        <member name="E:Borland.Studio.ToolsAPI.IOTAComponentInstallService.EndUpdate">
            <summary>
            Called when the <see cref="T:Borland.Studio.ToolsAPI.IOTAComponentInstallService"/> is done updating (types being installed or removed).
            </summary>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.IOTAModuleHandlerGauntletMember">
            <summary>
            Allows attaching handlers to modules
            </summary>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.IOTAModuleHandlerGauntletService">
            <summary>
            Allows notification when modules are created, so addins can attach services
            or other files to a module
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAModuleHandlerGauntletService.AddMember(Borland.Studio.ToolsAPI.IOTAModuleHandlerGauntletMember,System.Int32)">
            <summary>
            Adds a member with the given priority. 
            </summary>
            <param name="handler">The handler to add</param>
            <param name="priority">Higher priorities are run first. 1000 is the default.</param>
            <returns>The index of the added member</returns>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAModuleHandlerGauntletService.RemoveMember(System.Int32)">
            <summary>
            Removes an added member
            </summary>
            <param name="index">The index from a previous call to AddMember</param>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.IOTAAddReferenceDialog">
            <summary>
            Shows the add references dialog. It will throw an exception if there
            is no active project.
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAAddReferenceDialog.ShowDialog(Borland.Studio.ToolsAPI.IOTAProject)">
            <summary>
            Show the dialog.
            </summary>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.IOTAAddInService">
            <summary>
            Allows you to dynamically load an addin (an assembly which contains
            a static method named IDERegister).
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAAddInService.LoadAddIn(System.String)">
            <summary>
            Loads the addin; displays an error dialog if it failed.
            Returns True, if it failed and the addin should be removed.
            </summary>
            <param name="filename">The addin to load. May contain
            environment variables escaped with %VAR% or $(VAR)</param>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.IOTABitmapService">
            <summary>
            Load a bitmap from a Windows resource
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTABitmapService.LoadFromResourceID(System.String,System.Int32)">
            <summary>
            Load a bitmap from a Windows resource
            </summary>
            <param name="filename">The file containing the Windows resource</param>
            <param name="resID">The resourfe ID to load</param>
            <returns>The HBITMAP (Bitmap handle) of the image</returns>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.AssemblyUnloadedEventArgs">
            <summary>
            Event args for <see cref="M:Borland.Studio.ToolsAPI.IOTAAssemblyUnloadedService.OnAssemblyUnloaded(System.Object,Borland.Studio.ToolsAPI.AssemblyUnloadedEventArgs)"/>
            </summary>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.AssemblyUnloadedEventHandler">
            <summary>
            Event signature for <see cref="E:Borland.Studio.ToolsAPI.IOTAAssemblyUnloadedService.AssemblyUnloaded"/>
            </summary>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.IOTAAssemblyUnloadedService">
            <summary>
            Obtain notification when assemblies are unloaded
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAAssemblyUnloadedService.OnAssemblyUnloaded(System.Object,Borland.Studio.ToolsAPI.AssemblyUnloadedEventArgs)">
            <summary>
            Fire the above event.  Used internally by the IDE.
            </summary>
            <param name="sender">The object triggering the assembly unload</param>
            <param name="args">Event args for this event</param>
        </member>
        <member name="E:Borland.Studio.ToolsAPI.IOTAAssemblyUnloadedService.AssemblyUnloaded">
            <summary>
            Allows you to find out when an assembly was unloaded (IE: recompiled in the IDE).
            </summary>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.OTAMessageKind">
            <summary>
            Compiler message types to send to the message window.  See <see cref="T:Borland.Studio.ToolsAPI.IOTAMessageService"/>.
            </summary>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.IOTAMessageGroup">
            <summary>
            Represents a group or "tab" of messages in the IDE message window
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTAMessageGroup.Name">
            <summary>
            The name of the message group -- used as the caption of the tab in the message view
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTAMessageGroup.AutoScroll">
            <summary>
            Indicates whether or not the message group will auto scroll newly added messages into view
            </summary>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.MessageGroupEventArgs">
            <summary>
            Event args for message group events
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.MessageGroupEventArgs.Group">
            <summary>
            The message group that is being notified
            </summary>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.IOTACustomMessage">
            <summary>
            Custom messages allow children, help callbacks, file location associations, etc.
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTACustomMessage.ShowHelp">
            <summary>
            Show help information on your message, such as when the user presses F1
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTACustomMessage.GetChild(System.Int32)">
            <summary>
            Return each child message by its index (in the range 0 to n-1).
            Child messages can be expanded or contracted from the parent message.
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTACustomMessage.FileName">
            <summary>
            The file associated with this message, or blank for none
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTACustomMessage.LineNumber">
            <summary>
            The file line number associated with your message, if any
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTACustomMessage.ColumnNumber">
            <summary>
            The file column number associated with your message, if any
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTACustomMessage.LineText">
            <summary>
            The message's text for display in the message view
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTACustomMessage.ChildCount">
            <summary>
            The number of child messages your message has nested underneath it
            </summary>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.MessageGroupHandler">
            <summary>
            Event signature for several message group events
            </summary>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.IOTAMessageService">
            <summary>
            Status message window service
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAMessageService.AddCustomMessage(Borland.Studio.ToolsAPI.IOTACustomMessage)">
            <summary>
            Add an IOTACustomMessage to the message view.
            Returns a pointer to the message that can be used for
            adding a child message. 
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAMessageService.AddCustomMessage(Borland.Studio.ToolsAPI.IOTACustomMessage,System.IntPtr)">
            <summary>
            Add an IOTACustomMessage to the message view under a
            given parent message.
            Returns a pointer to the message that can be used for
            adding a child message. 
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAMessageService.AddCustomMessage(Borland.Studio.ToolsAPI.IOTACustomMessage,Borland.Studio.ToolsAPI.IOTAMessageGroup)">
            <summary>
            Add a custom message to a specific message group
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAMessageService.AddTitleMessage(System.String)">
            <summary>
            Add a title (bold) message to the message view
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAMessageService.AddToolMessage(System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Add a tool message that references a file name/location to the message view
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAMessageService.ClearAllMessages">
            <summary>
            Clear all messages in all groups and remove the extra groups
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAMessageService.ClearCompilerMessages">
            <summary>
            Clear compiler messages from the build message group
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAMessageService.ClearSearchMessages">
            <summary>
            Clear all search result messages
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAMessageService.ClearToolMessages">
            <summary>
            Clear all tool messages
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAMessageService.AddToolMessage(System.String,System.String,System.String,System.Int32,System.Int32,System.IntPtr,System.IntPtr@)">
            <summary>
            Add a tool message that references a file name/location and can
            be a parent or child of other tool messages to the message view.
            </summary>
            <param name="parent">The parent line reference returned from a previous call to AddToolMessage, or 0</param>
            <param name="lineRef">An out param that to used in subsequent calls to AddToolMessage when adding child messages</param>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAMessageService.AddMessageGroup(System.String)">
            <summary>
            Add a new message group
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAMessageService.AddTitleMessage(System.String,Borland.Studio.ToolsAPI.IOTAMessageGroup)">
            <summary>
            Add a title (bold) message to a specific message group
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAMessageService.AddToolMessage(System.String,System.String,System.String,System.Int32,System.Int32,System.IntPtr,System.IntPtr@,Borland.Studio.ToolsAPI.IOTAMessageGroup)">
            <summary>
            Add a tool message to a specific message group
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAMessageService.ClearMessageGroup(Borland.Studio.ToolsAPI.IOTAMessageGroup)">
            <summary>
            Clear all messages in the specified message group
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAMessageService.ClearToolMessages(Borland.Studio.ToolsAPI.IOTAMessageGroup)">
            <summary>
            Clear all tool messages in the specified message group
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAMessageService.GetMessageGroup(System.Int32)">
            <summary>
            Get a message group by index (0 to n-1)
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAMessageService.GetGroup(System.String)">
            <summary>
            Get a message group by its name
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAMessageService.ShowMessageView(Borland.Studio.ToolsAPI.IOTAMessageGroup)">
            <summary>
            Show a specific message group, or pass null to just show the message view window
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAMessageService.RemoveMessageGroup(Borland.Studio.ToolsAPI.IOTAMessageGroup)">
            <summary>
            Remove a message group (Note: you can not remove the Build message group)
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAMessageService.AddCompilerMessage(System.String,System.String,System.String,Borland.Studio.ToolsAPI.OTAMessageKind,System.Int32,System.Int32,System.IntPtr,System.IntPtr@)">
            <summary>
            Add a compiler message referencing a file/location to the message view.
            </summary>
            <param name="fileName">The file name where the message occurred</param>
            <param name="messageStr">The message itself</param>
            <param name="toolName">The name of the tool that generated the message</param>
            <param name="kind">The kind of message (can be otamkHint, otamkWarn, otamkError, otamkFatal, otamkInfo)</param>
            <param name="lineNumber">The line number where the message occurred</param>
            <param name="columnNumber">The column number where the message occurred</param>
            <param name="parent">The parent line reference returned from a previous call to AddCompilerMessage, or 0</param>
            <param name="lineRef">An out param that to used in subsequent calls to AddCompilerMessage when adding child messages</param>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAMessageService.AddCompilerMessage(System.String,System.String,System.String,Borland.Studio.ToolsAPI.OTAMessageKind,System.Int32,System.Int32,System.String,System.IntPtr,System.IntPtr@)">
            <summary>
            Add a compiler message referencing a file/location to the message view. This
            overload adds a helpKeyword string used context-sensitive help.
            </summary>
            <param name="fileName">The file name where the message occurred</param>
            <param name="messageStr">The message itself</param>
            <param name="toolName">The name of the tool that generated the message</param>
            <param name="kind">The kind of message (can be otamkHint, otamkWarn, otamkError, otamkFatal, otamkInfo)</param>
            <param name="lineNumber">The line number where the message occurred</param>
            <param name="columnNumber">The column number where the message occurred</param>
            <param name="helpKeyword">The help context keyword for this message</param>
            <param name="parent">The parent line reference returned from a previous call to AddCompilerMessage, or 0</param>
            <param name="lineRef">An out param that to used in subsequent calls to AddCompilerMessage when adding child messages</param>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAMessageService.AddCompilerMessage(System.String,System.String,System.String,Borland.Studio.ToolsAPI.OTAMessageKind,System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr@)">
            <summary>
            Add a compiler message referencing a file/location to the message view. This
            overload adds a helpContext integer used context-sensitive help.
            </summary>
            <param name="fileName">The file name where the message occurred</param>
            <param name="messageStr">The message itself</param>
            <param name="toolName">The name of the tool that generated the message</param>
            <param name="kind">The kind of message (can be otamkHint, otamkWarn, otamkError, otamkFatal, otamkInfo)</param>
            <param name="lineNumber">The line number where the message occurred</param>
            <param name="columnNumber">The column number where the message occurred</param>
            <param name="helpContext">The help context id for this message</param>
            <param name="parent">The parent line reference returned from a previous call to AddCompilerMessage, or 0</param>
            <param name="lineRef">An out param that to used in subsequent calls to AddCompilerMessage when adding child messages</param>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAMessageService.NextMessage(System.Boolean)">
            <summary>
            Select the next/previous message in the active message group
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAMessageService.NextErrorMessage(System.Boolean,System.Boolean)">
            <summary>
            Select the next/previous error message in the active message group
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTAMessageService.MessageGroupCount">
            <summary>
            Get the number of message groups that exist in the message view
            </summary>
        </member>
        <member name="E:Borland.Studio.ToolsAPI.IOTAMessageService.MessageGroupAdded">
            <summary>
            Occurs when a message group is added
            </summary>
        </member>
        <member name="E:Borland.Studio.ToolsAPI.IOTAMessageService.MessageGroupDeleted">
            <summary>
            Occurs when a message group is deleted
            </summary>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.OTAFileNotification">
            <summary>
            File notification types used by <see cref="E:Borland.Studio.ToolsAPI.IOTAService.FileNotification"/>
            </summary>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.IOTAEnvironmentOptions">
            <summary>
            IOTAEnvironmentOptions retrieves and stores the IDE’s environment
            options. Not all options are available through the Tools API, but many
            of the major options are supported.
            </summary>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.IFileNotificationEventArgs">
            <summary>
            Event argument interface for <see cref="T:Borland.Studio.ToolsAPI.FileNotificationEventArgs"/>
            </summary>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.FileNotificationEventArgs">
            <summary>
            Event args for IDE file notification events
            </summary>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.IOTAIdleNotifier">
            <summary>
            Allows idle access since TApplication.Idle is not available to .NET.
            </summary>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.IBeforeCompileEventArgs">
            <summary>
            Interface implemented by <see cref="T:Borland.Studio.ToolsAPI.BeforeCompileArgs"/>
            </summary>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.BeforeCompileArgs">
            <summary>
            Event args for IOTAService.BeforeCompile
            </summary>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.IAfterCompileEventArgs">
            <summary>
            Interface implemented by AfterCompileArgs 
            </summary>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.AfterCompileArgs">
            <summary>
            Event args for the AfterCompile event
            </summary>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.FileNotificationHandler">
            <summary>
            Event signature for IOTAService.FileNotification
            </summary>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.BeforeCompileHandler">
            <summary>
            Event signature for IOTAService.BeforeCompile
            </summary>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.AfterCompileHandler">
            <summary>
            Event signature for IOTAService.AfterCompile
            </summary>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.IOTAService">
            <summary>
            General IDE service/information
            </summary>
        </member>
        <member name="E:Borland.Studio.ToolsAPI.IOTAService.BeforeCompile">
            <summary>
            Occurs before a project has been compiled
            </summary>
        </member>
        <member name="E:Borland.Studio.ToolsAPI.IOTAService.AfterCompile">
            <summary>
            Occurs after a project has been compiled
            </summary>
        </member>
        <member name="E:Borland.Studio.ToolsAPI.IOTAService.FileNotification">
            <summary>
            Occurs when files are opened, closed, etc.
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTAService.BaseRegistryKey">
            <summary>
            The base Windows registry key where the IDE's configuration is stored
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTAService.ProductIdentifier">
            <summary>
            Identifies the active IDE with a string like "C++Builder" or "Delphi"
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTAService.ActiveDesignerType">
            <summary>
            Returns a value from <see cref="T:Borland.Studio.ToolsAPI.OTADesignerTypes"/>
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTAService.RootDirectory">
            <summary>
            Returns the root installation directory of the IDE
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTAService.BinDirectory">
            <summary>
            Returns the IDE's bin directory where executables are stored
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTAService.TemplateDirectory">
            <summary>
            Returns the location of the template/object-repository directory
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTAService.ApplicationDataDirectory">
            <summary>
            Returns the location of the Application Data directory for the current user and product
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTAService.LocalApplicationDataDirectory">
            <summary>
            Returns the location of the Local Application Data directory for the current user and product
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTAService.ParentHandle">
            <summary>
            Returns the main application's Windows API handle
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTAService.EnvironmentOptions">
            <summary>
            Returns an interface to the IDE environment options
            </summary>
        </member>
        <member name="E:Borland.Studio.ToolsAPI.IOTAService.CacheCleared">
            <summary> Occurs when the compiler's cache is cleared of pacakges/units.
            Only called for Delphi.
            </summary>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.IOTADotNetObjectInspectorService">
            <summary>
            Manipulate the object inspector
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTADotNetObjectInspectorService.SelectObjects(System.Object[])">
            <summary>
            Select the given list of objects into the object inspector
            </summary>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.IOTACultureInfo">
            <summary>
            Obtain .NET culture information
            </summary> 
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTACultureInfo.GetCultureCodes">
            <summary>
            Get all of the currently available culture names (from <see cref="M:System.Globalization.CultureInfo.GetCultures(System.Globalization.CultureTypes)"/>)
            </summary>
            <returns>The culture names</returns>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.IOTAMenuItem">
            <summary>
            Represents an existing or addin main menu item.  Modifying menu items
            you did not create is not recommended and may not function as expected,
            since the IDE expects to be in control of certain menu items and actions.
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAMenuItem.ChildMenuItem(System.Int32)">
            <summary>
            Get a child menu item (submenu item) by its index
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAMenuItem.Execute">
            <summary>
            Trigger the execution of a menu item (simulate a click)
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTAMenuItem.Name">
            <summary>
            The menu item's internal name
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTAMenuItem.Text">
            <summary>
            The user-visible menu caption
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTAMenuItem.Enabled">
            <summary>
            Enable/disable the menu item
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTAMenuItem.Checked">
            <summary>
            Check/uncheck the menu item
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTAMenuItem.Visible">
            <summary>
            Show/hide the menu item
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTAMenuItem.Shortcut">
            <summary>
            The shortcut for the menu item, or 0 if none is desired.  Note that this is a
            Delphi TShortcut-style value.  The shortcut might need to be set after the IDE
            has loaded to persist through the session.
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTAMenuItem.Category">
            <summary>
            The category for the menu action (Tools is the default, but things like File,
            Edit, View, Project, and Help are other choices).  The value places the
            action in the specified category for toolbar customization purposes.
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTAMenuItem.PreviousMenuItem">
            <summary>
            The menu item before the current one with the same parent, or null if none
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTAMenuItem.NextMenuItem">
            <summary>
            The menu item after the current one with the same parent, or null if none
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTAMenuItem.ParentMenuItem">
            <summary>
            Returns the parent menu item, or null if this is a top-level menu item
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTAMenuItem.ChildCount">
            <summary>
            The number of child menu items
            </summary>
        </member>
        <member name="E:Borland.Studio.ToolsAPI.IOTAMenuItem.Executed">
            <summary>
            Occurs when the menu item is executed/selected by the user.
            This event only fires for menu items you create.  Remember to remove your
            event handler when it is no longer needed.
            </summary>
        </member>
        <member name="E:Borland.Studio.ToolsAPI.IOTAMenuItem.Updated">
            <summary>
            Occurs when the menu item is about to be displayed.
            This event only fires for menu items you create.  Remember to remove your
            event handler when it is no longer needed.
            </summary>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.OTAContainerTypes">
            <summary>
            Some of the preset identifers that could be passed to
            IOTAProjectMenuCreatorNotifier.  Other values could be file names.
            </summary>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.IOTAProjectMenuCreatorNotifier">
             <summary>
            
             </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAProjectMenuCreatorNotifier.AddMenu(System.String)">
            <summary>
            MenuItem will be inserted into the project manager local menu. Menu
             may have child menus.
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAProjectMenuCreatorNotifier.CanHandle(System.String)">
            <summary>
            Return True if you wish to install a project manager menu item for this
             ident.  In cases where the project manager node is a file Ident will be
             a fully qualified file name.
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAProjectMenuCreatorNotifier.Destroyed">
             <summary>
            
             </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAProjectManagerMenuServices.CreateMenuItem(System.String,System.String)">
             <summary>
            
             </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAProjectManagerMenuServices.AddMenuItem(Borland.Studio.ToolsAPI.IOTAMenuItem,System.String,System.String)">
             <summary>
            
             </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAProjectManagerMenuServices.AddMenuCreatorNotifier(Borland.Studio.ToolsAPI.IOTAProjectMenuCreatorNotifier)">
             <summary>
            
             </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAProjectManagerMenuServices.RemoveMenuCreatorNotifier(System.Int32)">
             <summary>
            
             </summary>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.IOTAProjectManager">
            <summary>
            Access the ProjectManager
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTAProjectManager.CurrentSelectionIdent">
             <summary>
            
             </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTAProjectManager.CurrentSelectionProject">
             <summary>
            
             </summary>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.OTAMenuItemLocation">
            <summary>
            Main menu item locations, for adding new items.  See <see cref="M:Borland.Studio.ToolsAPI.IOTAMainMenuService.AddMenuItem(System.String,Borland.Studio.ToolsAPI.OTAMenuItemLocation,System.String,System.String)"/>.
            </summary>
        </member>
        <member name="F:Borland.Studio.ToolsAPI.OTAMenuItemLocation.otamlBefore">
            <summary>
            Add the new item as a sibling just before the reference item
            </summary>
        </member>
        <member name="F:Borland.Studio.ToolsAPI.OTAMenuItemLocation.otamlAfter">
            <summary>
            Add the new item as a sibling just after the reference item
            </summary>
        </member>
        <member name="F:Borland.Studio.ToolsAPI.OTAMenuItemLocation.otamlChild">
            <summary>
            Add the new item as a child of the reference item
            </summary>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.IOTAMainMenuService">
            <summary>
            Iterate, add, and remove main menu items by name
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAMainMenuService.GetFirstMenuItem">
            <summary>
            Get a reference to the first main menu item (usually the File menu item)
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAMainMenuService.GetMenuItem(System.String)">
            <summary>
            Get a menu item by its internal name
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAMainMenuService.RemoveMenuItem(System.String)">
            <summary>
            Remove a menu item and all children.  Removing items you didn't create is
            not recommended.  Consider hiding them instead, if absolutely necessary.
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAMainMenuService.AddMenuItem(System.String,Borland.Studio.ToolsAPI.OTAMenuItemLocation,System.String,System.String)">
            <summary>
            Add a new menu item at a position relative to an existing referenced menu item.
            You must supply the menu item's internal name and text caption.  Other properties
            can be set using the returned IOTAMenuItem interface.
            </summary>
            <param name="referenceItemName">The referenced item's name</param>
            <param name="newLocation">The new location to put the menu item</param>
            <param name="newName">The new name of the new menu item</param>
            <param name="newText">The text to display in the menu item</param>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAMainMenuService.AddMenuItem(System.String,Borland.Studio.ToolsAPI.OTAMenuItemLocation,System.String,System.String,System.IntPtr)">
            <summary>
            Add a new menu item at a position relative to an existing referenced menu item.
            You must supply the menu item's internal name and text caption.  Other properties
            can be set using the returned <see cref="T:Borland.Studio.ToolsAPI.IOTAMenuItem"/> interface.
            The menu item can have an associated 16x16 bitmap (a windows HBITMAP value).
            </summary>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.OTADesignerTypes">
            <summary>
            Values returned by <see cref="P:Borland.Studio.ToolsAPI.IOTAService.ActiveDesignerType"/> and
            <see cref="P:Borland.Studio.ToolsAPI.IOTARepositoryWizard.Designer"/>
            </summary>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.OTACreatorTypes">
            <summary>
            Default IDE application/project/module types for creators
            </summary>
        </member>
        <member name="F:Borland.Studio.ToolsAPI.OTACreatorTypes.sUnit">
            <summary>
            Raw no form designer unit/C++ module and skeleton code
            </summary>
        </member>
        <member name="F:Borland.Studio.ToolsAPI.OTACreatorTypes.sForm">
            <summary>
            Unit/C++ module with a form designer
            </summary>
        </member>
        <member name="F:Borland.Studio.ToolsAPI.OTACreatorTypes.sText">
            <summary>
            Raw single file module with no skeleton code
            </summary>
        </member>
        <member name="F:Borland.Studio.ToolsAPI.OTACreatorTypes.sApplication">
            <summary>
            Standard application
            </summary>
        </member>
        <member name="F:Borland.Studio.ToolsAPI.OTACreatorTypes.sLibrary">
            <summary>
            DLL project
            </summary>
        </member>
        <member name="F:Borland.Studio.ToolsAPI.OTACreatorTypes.sConsole">
            <summary>
            Console applcation
            </summary>
        </member>
        <member name="F:Borland.Studio.ToolsAPI.OTACreatorTypes.sPackage">
            <summary>
            Borland package
            </summary>
        </member>
        <member name="F:Borland.Studio.ToolsAPI.OTACreatorTypes.sCSApplication">
            <summary>
            Standard C# application
            </summary>
        </member>
        <member name="F:Borland.Studio.ToolsAPI.OTACreatorTypes.sCSLibrary">
            <summary>
            C# Library
            </summary>
        </member>
        <member name="F:Borland.Studio.ToolsAPI.OTACreatorTypes.sCSConsole">
            <summary>
            C# console application
            </summary>
        </member>
        <member name="F:Borland.Studio.ToolsAPI.OTACreatorTypes.sCSPackage">
            <summary>
            C# package
            </summary>
        </member>
        <member name="F:Borland.Studio.ToolsAPI.OTACreatorTypes.sAssembly">
            <summary>
            .NET assembly.  Equivalent to sLibrary.
            </summary>
        </member>
        <member name="F:Borland.Studio.ToolsAPI.OTACreatorTypes.sUserControl">
            <summary>
            When used as an application type, a new user control assembly is created.
            When used as a module type, a new user control module is created.
            </summary>
        </member>
        <member name="F:Borland.Studio.ToolsAPI.OTACreatorTypes.sClass">
            <summary>
            Used to create a new module source as a generic class
            </summary>
        </member>
        <member name="F:Borland.Studio.ToolsAPI.OTACreatorTypes.sWinForm">
            <summary>
            WinForms module.  Equivalent to sForm.
            </summary>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.OTAIDEPersonalities">
            <summary>
            Pre-defined personality descriptors <seealso cref="P:Borland.Studio.ToolsAPI.IOTAProjectCreator.ProjectPersonality"/>
            </summary>
        </member>
        <member name="F:Borland.Studio.ToolsAPI.OTAIDEPersonalities.sDefaultPersonality">
            <summary>
            This is the default personality that is used to register default file
            personality traits.
            </summary>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.OTAGalleryCategories">
            <summary>
            Pre-defined Gallery categories.  You can add your wizards to
            specific categories in the Gallery.  You must first register
            or find your category before using it.  The following
            pre-defined categories may already exist.  See <see cref="T:Borland.Studio.ToolsAPI.IOTAGalleryCategory"/>.
            </summary>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.IOTAFile">
            <summary>
            Represents a file that will be created inside the IDE by a creator
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTAFile.Source">
            <summary>
            Return the contents of the file
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTAFile.Age">
            <summary>
            Return the file date
            </summary>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.IOTACreator">
            <summary>
            Implement IOTACreator to create new files in the IDE
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTACreator.CreatorType">
            <summary>
            Return a string representing the default creator type in which to augment.
            See <see cref="T:Borland.Studio.ToolsAPI.OTACreatorTypes"/>.  Return an empty string indicating that this
            creator will provide *all* information, and does not need defaults.
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTACreator.Existing">
            <summary>
            Return false if this is a new module or true if it is already saved to disk
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTACreator.FileSystem">
            <summary>
            Return the File system IDString that this module uses for reading/writing
            or an empty string for the default (disk) file system.
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTACreator.Owner">
            <summary>
            Return the owning module, or null.  For a project module, this would
            be a project.  For a project, this is a project group.
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTACreator.Unnamed">
            <summary>
            Return true, if this item is to be marked as un-named.  This will force the
            save as dialog to appear the first time the user saves.
            </summary>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.IOTAModuleCreator">
            <summary>
            Implement IOTAModuleCreator to create a new source code file
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAModuleCreator.NewFormFile(System.String,System.String)">
            <summary>
            Create and return the form resource (dfm) for this new module
            or null. This value is ignored for .NET modules.
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAModuleCreator.NewImplSource(System.String,System.String,System.String)">
            <summary>
            Create and return the Implementation source for this module
            (.cs for C#, .pas for Delphi, etc.).  For C# modules, this is required, but
            other modules might allow null to create a "default" module source file.
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAModuleCreator.NewIntfSource(System.String,System.String,System.String)">
            <summary>
            Create and return the Interface (C++ header) source for this module
            or null for the default.
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTAModuleCreator.AncestorName">
            <summary>
            Return the Ancestor form name (not type) (ignored for .NET modules)
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTAModuleCreator.ImplFileName">
            <summary>
            Return the main/implementation filename, or blank to have the IDE create
            a new unique one.  If a value is returned then it *must* be a fully
            qualified filename.
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTAModuleCreator.IntfFileName">
            <summary>
            Return the interface filename, if any, or blank to have the IDE create
            a new unique one.  If a value is returned then it *must* be a fully
            qualified filename.  This is only used for creating C++ header files.
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTAModuleCreator.FormName">
            <summary>
            Return the form name for your form, or blank to let the IDE choose.
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTAModuleCreator.MainForm">
            <summary>
            Return true to make this module the main form of the Owner/Project.
            Ignored for .NET modules.
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTAModuleCreator.ShowForm">
            <summary>
            Return true to show the form after it is created.  Ignored for .NET modules.
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTAModuleCreator.ShowSource">
            <summary>
            Return true to show the source after it is created
            </summary>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.IOTAProjectCreator">
            <summary>
            Implement IOTAProjectCreator to create a new project
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAProjectCreator.NewProjectResource(Borland.Studio.ToolsAPI.IOTAProject)">
            <summary>
            Called to indicate when to create/modify the project resource file
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAProjectCreator.NewProjectSource(System.String)">
            <summary>
            Create and return the Project source file, or null for the default
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAProjectCreator.NewDefaultProjectModule(Borland.Studio.ToolsAPI.IOTAProject)">
            <summary>
            Called to create a new default module(s) for the given project.  This
            interface method is the preferred mechanism to create the modules.
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTAProjectCreator.FileName">
            <summary>
            Return the fully qualified project file name (drive, path, full filename)
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTAProjectCreator.ShowSource">
            <summary>
            Return true to show the source
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTAProjectCreator.ProjectPersonality">
            <summary>
            Implement this interface and return the correct personality of the project
            to create.  The CreatorType function should return any sub-types that this
            personality can create.  For instance, in the Delphi.Personality, returning
            "Package" from CreatorType will create a proper package project.
            </summary>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.IOTAProjectGroupCreator">
            <summary>
            Implement IOTAProjectGroupCreator to create a new project group
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTAProjectGroupCreator.FileName">
            <summary>
            Return the project group file name
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTAProjectGroupCreator.ShowSource">
            <summary>
            Return true to show the source
            </summary>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.IOTAActionService">
            <summary>
            Perform various actions on files and projects
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAActionService.CloseFile(System.String)">
            <summary>
            Close the given file
            </summary>
            <param name="fileName">The file to close</param>
            <returns>Returns true on success</returns>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAActionService.OpenFile(System.String)">
            <summary>
            Open the given file
            </summary>
            <param name="fileName">The file to open</param>
            <returns>Returns true on success</returns>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAActionService.OpenProject(System.String,System.Boolean)">
            <summary>
            Open the given project
            </summary>
            <param name="fileName">The project to open</param>
            <returns>Returns true on success</returns>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAActionService.ReloadFile(System.String)">
            <summary>
            Reload the given file
            </summary>
            <param name="fileName">The file to reload</param>
            <returns>Returns true for success</returns>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAActionService.SaveFile(System.String)">
            <summary>
            Save the given file
            </summary>
            <param name="fileName">The file to save</param>
            <returns>Returns true for success</returns>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.OTACodeCompleteStyle">
            <summary>
            Used by <see cref="M:Borland.Studio.ToolsAPI.IOTAEditActions.CodeCompletion(Borland.Studio.ToolsAPI.OTACodeCompleteStyle)"/> to define the type of code
            completion to execute,  Values should be combined via bitwise or.
            </summary>
        </member>
        <member name="F:Borland.Studio.ToolsAPI.OTACodeCompleteStyle.csCodelist">
            <summary>
            Invoke the IDE's CodeInsight Code completion function
            </summary>
        </member>
        <member name="F:Borland.Studio.ToolsAPI.OTACodeCompleteStyle.csParamList">
            <summary>
            Invoke the IDE's CodeInsight Code parameters function
            </summary>
        </member>
        <member name="F:Borland.Studio.ToolsAPI.OTACodeCompleteStyle.csManual">
            <summary>
            This will cause the operation to be invoked immediately.
            otherwise the IDE will use the delay timer set through the
            Code Insight options before invoking the operation.
            </summary>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.IOTAEditActions">
            <summary>
            Perform various actions on files and projects.  <see cref="T:Borland.Studio.ToolsAPI.IOTAEditView"/> implements IOTAEditActions.
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAEditActions.ClassNavigate(System.Byte)">
            <summary> Navigate within the current class </summary>
            <param name="reserved">Currently unused, pass 0</param>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAEditActions.CodeCompletion(Borland.Studio.ToolsAPI.OTACodeCompleteStyle)">
            <summary> Invoke CodeInsight </summary>
            <param name="style">See OTACodeCompleteStyle for valid the values</param>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.IOTAWizard">
            <summary>
            IOTAWizard represents a generic IDE addin.  They can add gallery
            items, or be generic experts that add menu items, etc.
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAWizard.Execute">
            <summary>
            Perform your wizard's action
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAWizard.Destroyed">
            <summary>
            Callback occurs when the wizard is removed from the IDE
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTAWizard.IDString">
            <summary>
            The internal ID should be unique such as "Company.Product.1.0"
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTAWizard.Name">
            <summary>
            User-visible name of the wizard
            </summary>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.IOTARepositoryWizard">
            <summary>
            IOTARepositoryWizard creates gallery items for the File, New dialog.
            You must also implement a descendent interface like <see cref="T:Borland.Studio.ToolsAPI.IOTAFormWizard"/> or
            <see cref="T:Borland.Studio.ToolsAPI.IOTAProjectWizard"/> so the IDE knows which type you've created.
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTARepositoryWizard.Author">
            <summary>
            Return the a string representing the author
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTARepositoryWizard.Comment">
            <summary>
            A comment
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTARepositoryWizard.Glyph">
            <summary>
            Return the Windows HICON for the glyph, or 0 for the default
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTARepositoryWizard.Designer">
            <summary>
            This function should return the appropriate designer affinity for which
            this wizard is applicable.  This will help the File|New|Other... dialog
            filter the appropriate items based on the current project.  See
            <see cref="T:Borland.Studio.ToolsAPI.OTADesignerTypes"/> for some potential values.
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTARepositoryWizard.GalleryCategory">
            <summary>
            Determines the position of the new item in the reposiroty/gallery
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTARepositoryWizard.Personality">
            <summary>
            Determines what IDE personality this wiaard is valid for.  See <see cref="T:Borland.Studio.ToolsAPI.OTAIDEPersonalities"/>.
            </summary>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.IOTAGalleryCategory">
            <summary>
            Gallery categories fill in the tree for the File, New dialog
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTAGalleryCategory.DisplayName">
            <summary>
            User-visible category name
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTAGalleryCategory.IDString">
            <summary>
            Internal ID string used to identify this category.  Must be unique.
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTAGalleryCategory.parent">
            <summary>
            Obtain the parent category, or null is none exists.
            </summary>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.IOTAGalleryCategoryManager">
            <summary>
            Query BorlandIDEServices for IOTAGalleryCategoryManager.  It might not
            be available immediately on startup, so delay querying for this.
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAGalleryCategoryManager.FindCategory(System.String)">
            <summary>
            Locate a category by the internal ID
            </summary>
            <param name="idString">The internal ID of the category to find</param>
            <returns>The category, or null if not found</returns>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAGalleryCategoryManager.AddCategory(System.String,System.String,System.IntPtr)">
            <summary>
            Add a new gallery category without a parent category.  Note that empty categories will not show.
            </summary>
            <param name="idString">Internal ID used to locate the category. Must be unique.</param>
            <param name="displayName">The user-visible category text</param>
            <param name="iconHandle">The windows HICON handle used for this item's glyph, or 0 for the default </param>
            <returns>The added category</returns>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAGalleryCategoryManager.AddCategory(Borland.Studio.ToolsAPI.IOTAGalleryCategory,System.String,System.String,System.IntPtr)">
            <summary>
            Add a new gallery category to a parent parent category. Note that empty categories will not show.
            </summary>
            <param name="parentCategory">The parent category interface</param>
            <param name="idString">Internal ID used to locate the category. Must be unique.</param>
            <param name="displayName">The user-visible category text</param>
            <param name="iconHandle">The windows HICON handle used for this item's glyph, or 0 for the default </param>
            <returns>The added category</returns>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAGalleryCategoryManager.DeleteCategory(Borland.Studio.ToolsAPI.IOTAGalleryCategory)">
            <summary>
            Remove a category and all wizards in that category
            </summary>
            <param name="category"></param>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.IOTAFormWizard">
            <summary>
            Repository wizards should implement this to indicate they create modules/forms
            </summary>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.IOTAProjectWizard">
            <summary>
            Repository wizards should implement this to indicate they create projects
            </summary>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.IOTAMenuWizard">
            <summary>
            A basic wizard that adds a menu item to the help menu
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTAMenuWizard.MenuText">
            <summary>
            The text (caption) of the wizard's menu item
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTAMenuWizard.Enabled">
            <summary>
            If the wizard's menu item is enabled
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTAMenuWizard.Checked">
            <summary>
            If the wizard's menu item is checked
            </summary>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.IOTAWizardService">
            <summary>
            Add and remove wizards from the IDE
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAWizardService.AddWizard(Borland.Studio.ToolsAPI.IOTAWizard)">
            <summary>
            Call this to register an <see cref="T:Borland.Studio.ToolsAPI.IOTAWizard"/> interface
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAWizardService.RemoveWizard(System.Int32)">
            <summary>
            Remove the index'd Wizard
            </summary>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.IOTAAboutBoxService">
            <summary>
            Add information to the IDE about box
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAAboutBoxService.AddPluginInfo(System.String,System.String,System.IntPtr,System.Boolean,System.String,System.String)">
            <summary>
            Call AddPluginInfo to provide information specific to a particular plugin.
            The caller should save the returned index in order to later remove the
            plug-in info using <see cref="M:Borland.Studio.ToolsAPI.IOTAAboutBoxService.RemovePluginInfo(System.Int32)"/>.
            </summary>
            <param name="title">Displayed in a listbox in which the user can select your plugin</param>
            <param name="description">Displayed in a read-only memo which should describe the plugin</param>
            <param name="image">The Windows HBITMAP (bitmap handle) of an image to be displayed next to the
            description when your title is selected. The bitmap should be 24x24 pixels and the transparent
            color should be pre-set if any is desired using Bitmap.MakeTransparent.</param>
            <param name="isUnRegistered">If isUnRegistered is true, the title will be painted red.</param>
            <param name="licenseStatus">licenseStatus will be shown in a label when the title is selected.</param>
            <param name="skuName">skuName will be shown in a label when the title is selected.</param>
            <returns>The index you must later use to remove the plugin registration.</returns>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAAboutBoxService.AddProductInfo(System.String,System.String,System.String,System.String,System.IntPtr,System.IntPtr,System.Boolean,System.String,System.String)">
            <summary>
            AddProductInfo is similar to <see cref="M:Borland.Studio.ToolsAPI.IOTAAboutBoxService.AddPluginInfo(System.String,System.String,System.IntPtr,System.Boolean,System.String,System.String)"/>, except the caller can customize
            the about box title, copyright string and provide an extra about box graphic.
            This method is designed to be used by major IDE personalities/products, not
            normal IDE plugins.
            </summary>
            <param name="dialogTitle">Abourt box dialog title</param>
            <param name="copyright">The product name, version, and copyright info.  This information is displayed at the top of the about box.</param>
            <param name="title">Displayed in a listbox in which the user can select your plugin</param>
            <param name="description">Displayed in a read-only memo which should describe the plugin</param>
            <param name="aboutImageHandle">The Windows HBITMAP (bitmap handle) of an image to be displayed next to the
            description when your title is selected. The bitmap should be 48x48 pixels.</param>
            <param name="productImageHandle">The HBITMAP value of the main product image.  See aboutImageHandle.</param>
            <param name="isUnRegistered">If isUnRegistered is true, the title will be painted red.</param>
            <param name="licenseStatus">licenseStatus will be shown in a label when the title is selected.</param>
            <param name="skuName">skuName will be shown in a label when the title is selected.</param>
            <returns>The index you must later use to remove the product registration.</returns>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAAboutBoxService.RemovePluginInfo(System.Int32)">
            <summary>
            When a plugin is unloaded, it should remove itself using RemovePluginInfo
            </summary>
            <param name="index">The index returned from a previous call to AddPluginInfo</param>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAAboutBoxService.RemoveProductInfo(System.Int32)">
            <summary>
            When a product is unloaded, it should remove itself using RemoveProductInfo
            </summary>
            <param name="index">The index returned from a previous call to AddProductInfo</param>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.IOTASplashScreenService">
            <summary>
            Add items to the product splash screen that shows during startup.
            You can only use this service using SplashScreenService.GetService;
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTASplashScreenService.AddPluginBitmap(System.String,System.IntPtr,System.Boolean,System.String,System.String)">
            <summary>
            An IDE plugin may provide an image to be displayed on the splash screen
            as the product is initializing.  If AddPluginBitmap is called,
            <see cref="M:Borland.Studio.ToolsAPI.IOTASplashScreenService.AddProductBitmap(System.String,System.IntPtr,System.Boolean,System.String,System.String)"/> should not be called or a duplicate entry will be
            displayed.
            </summary>
            <param name="caption">Describes the plugin being loaded.</param>
            <param name="bitmapHandle">The Windows HBITMAP value of a 24x24 pixel bitmap image.</param>
            <param name="isUnRegistered">If isUnRegistered is true, the caption will be painted red.</param>
            <param name="licenseStatus">licenseStatus will be shown in parentheses after the caption.</param>
            <param name="skuName">skuName will be appended to the caption.</param>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTASplashScreenService.AddProductBitmap(System.String,System.IntPtr,System.Boolean,System.String,System.String)">
            <summary>
            Personalities can not be completely implemented from .NET, so this is not supported yet.
            An IDE personality may provide an image to be displayed on the splash screen
            as the product is initializing.
            </summary>
            <param name="caption">Describes the personality being loaded.</param>
            <param name="bitmapHandle">The Windows HBITMAP value of a 24x24 pixel bitmap image.</param>
            <param name="isUnRegistered">If isUnRegistered is true, the caption will be painted red.</param>
            <param name="licenseStatus">Shown in parentheses after the caption.</param>
            <param name="skuName">skuName will be appended to the caption.</param>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTASplashScreenService.ShowProductSplash(System.IntPtr)">
            <summary>
            Personalities can not be completely implemented from .NET, so this is not supported yet.
            If there is exactly one product personality installed into the IDE,
            the built-in splash screen will not be displayed.  Instead, the IDE will
            wait for the single personality to call ShowProductSplash in order to
            display that product's splash screen.  Even if there are multiple product
            personalities installed, each one should still call this method as it will
            be properly ignored if the IDE sees that more than one product personality
            is installed.  This keeps the product personalities from having to detect
            if they are the only one available.
            </summary>
            <param name="bitmapHandle">The Windows HBITMAP value of a 450x300 pixel splash screen image.</param>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTASplashScreenService.StatusMessage(System.String)">
            <summary>
            During product startup, the IDE and any add-in or personality may wish to
            display status info for the user.  Call StatusMesage to display this
            string on the splash screen.
            </summary>
            <param name="statusMessage">The string to display in the splash screen status area</param>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTASplashScreenService.SetProductIcon(System.IntPtr)">
            <summary>
            A full product personality may call SetProductIcon in order to setup the
            product's icon that will be displayed on the application main form and
            the taskbar. If this is not called or there are multiple personalities
            installed, the default IDE icon is used.
            </summary>
            <param name="iconHandle">A Windows HICON value representing the desired icon</param>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.OTAFile">
            <summary>
            Implements the most common usage of <see cref="T:Borland.Studio.ToolsAPI.IOTAFile"/> for use by the various creators
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.OTAFile.#ctor(System.String,System.DateTime)">
            <summary>
            Create a new OTAFile object implementing <see cref="T:Borland.Studio.ToolsAPI.IOTAFile"/> with the given text and date
            </summary>
            <param name="source">The text of the source file</param>
            <param name="date">The initial file date</param>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.OTAFile.#ctor(System.String)">
            <summary>
            Create a new OTAFile object implementing <see cref="T:Borland.Studio.ToolsAPI.IOTAFile"/> with the given text and a default date
            </summary>
            <param name="source">The text of the source file</param>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.OTAFile.Source">
            <summary>
            Obtain the text of the source file
            </summary>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.ComponentRenamedEventArgs">
            <summary>
            Event args for the <see cref="E:Borland.Studio.ToolsAPI.IOTAFormEditor.ComponentRenamed"/> event
            </summary>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.ComponentRenamedEventHandler">
            <summary>
            Event signature for <see cref="E:Borland.Studio.ToolsAPI.IOTAFormEditor.ComponentRenamed"/>
            </summary>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.IOTAPackageInstallService">
            <summary>For installing packages used by Delphi.NET.
             This interface will ONLY be available if the Delphi.NET personality
             is alive in the IDE</summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAPackageInstallService.GetPackageInformation(System.String)">
            <summary> Retrieves a given IOTAPackageInformation for a filename,
            if it can. Calling this will modify InstalledPackages with
            dependent packages, and the said one loaded.
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAPackageInstallService.RemovePackageInformation(Borland.Studio.ToolsAPI.IOTAPackageInformation)">
            <summary>Remove an installed package. Save must be called to persist the change. </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAPackageInstallService.Load">
            <summary>Load the state of installed packages. Loading without saving restores original state.</summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTAPackageInstallService.Save">
            <summary>Save the current state and changes made</summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IOTAPackageInstallService.InstalledPackages">
            <summary>
             Allows you to access the installed packages.
            </summary>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.IOTASymbolHelp">
            <summary>Request from the module IOTASymbolHelp to try and
            retrieve information about what a given symbol is at the
            given point. Implemented in Delphi .NET for F1 help. Return an
            empty string if the sybmol isn't known around that position.
            </summary>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.IInteropCodeEditorControl">
            <summary>
            This is used by the refactoring window to display a code editor.
            It is very specific to just that use, right now, and will have
            to be abstracted more if we use it for other things.
            IE: It is only readonly at this time.
            </summary>
        </member>
        <member name="P:Borland.Studio.ToolsAPI.IInteropCodeEditorControl.Text">
            <summary>
            The text to display or that is being displayed.
            NOTE: may not work to get the value at this time.
            </summary>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.IInteropCodeEditorControlCreator">
            <summary>
            Used to acquire a new instance of an IInteropCodeEditorControl.
            Not for public use; please only use internally.
            </summary>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.IOTARegistrationService">
            <summary>
            Used to register and unregister an assembly and it's type library
            with the windows registry.
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTARegistrationService.RegisterAssemblyWithRegistry(System.String)">
             <summary>
             Called to register an assembly and it's type library with the
             registry. The following keys are added to the registry.
            
             HKEY_CLASSES_ROOT\progid
                (default) = progId
             HKEY_CLASSES_ROOT\progid\CLSID
                (default) = clsid
             HKEY_CLASSES_ROOT\CLSID\{clsid}
                (default) = progid
             HKEY_CLASSES_ROOT\CLSID\{clsid}\InProcServer32
                (default) = mscoree.dll
                Class = ClassName
                ThreadingModel = Both
                Assembly = Stringized_assembly_reference
                Codebase = path_of_private_assembly
                RuntimeVersion = version_of_the_runtime
             HKEY_CLASSES_ROOT\CLSID\{clsid}\Implemented Categories\{62C8FE65-4EBB-45e7-B440-6E39B2CDBF29}
             HKEY_CLASSES_ROOT\CLSID\{clsid}\ProgId
                (default) = progid
            
             A type library is generated and the following additional
             entries are created in the registry.
            
             HKEY_CLASSES_ROOT\{clsid}\TypeLib
                (default) = tlbid
             HKEY_CLASSES_ROOT\Typelib\{tlbid}\x.y\lcid\win32
                (default) = location of type library file
             HKEY_CLASSES_ROOT\Typelib\{tlbid}\x.y\FLAGS
                (default) = 0
             </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTARegistrationService.UnregisterAssemblyFromRegistry(System.String)">
            <summary>
            Called to remove the entries in the registry created from
            RegisterAssemblyWithRegistry.
            </summary>
        </member>
        <member name="M:Borland.Studio.ToolsAPI.IOTARegistrationService.GenerateInteropAssembly(System.String,System.String@)">
            <summary>
            Called to create an interop Assembly (or Assemblies) from a .dll or
            .ocx that contains a Type Library. The generated interop Assemblies
            are returned as in the Files parameter as a comma delimited
            string. You can specify the main interop file with the
            AssemblyFileName parameter. If the Type Library contains ActiveX
            controls then more than one Assembly may be generated. To find out
            if the Type Library contains ActiveX controls the file name of the
            Assembly containing the ActiveX control will contain a prefix of 'Ax'.
            If there is a postfix of 'Impl' then the Type Libary only contains
            a COM server. If the parameter AssemblyFileName is provided then
            the prefix and postfix have no relevance and the main assembly file
            name is the one provided.
            </summary>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.IOTAProjectFileStorageNotifier">
             <summary>
            
            
             </summary>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.IOTAProjectFileStorage">
             <summary>
            
            
             </summary>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.IOTACodeBrowsePreview">
            <summary>
            Used for the new Code Insight Preview feature. To be implemented by a module,
            and queried for by Code Insight. Not ComVisible because it is duplicated
            in ToolsAPI.pas. If you change it here, you MUST change it in ToolsAPI.pas.
            </summary>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.IOTATimerServices">
            <summary>
            This provides a globally available service for timing operations and tracking performance.
            Individual timer results are tracked and persisted by a more complete performance monitor
            implementation.  See the PerfMon.pas unit for information.
            </summary>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.IOTAHelpTrait">
            <summary>
            To invoke personality specific help use the IOTAHelpTrait.
            </summary>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.IOTAPersonalityHelpTrait">
            <summary>
            Provides personality specific help for ShowKeywordHelp and
            UnderstandsKeyword.
            </summary>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.IOTAHelpServices">
            <summary>
            To invoke the help from within the IDE use the IOTAHelpServices.
            In addition each personality has its own help services. Use
            GetFileHelpTrait or GetPersonalityHelpTrait to request the personality
            specific help services. If you don't know the current personality
            call GetPersonalityHelpTrait with personality being an empty string
            and the help service to figure it out the current personality.
            </summary>
        </member>
        <member name="T:Borland.Studio.ToolsAPI.GlobalResources">
            <summary>
            Summary description for GlobalResources.
            </summary>
        </member>
    </members>
</doc>
